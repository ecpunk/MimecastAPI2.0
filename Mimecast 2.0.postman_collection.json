{
	"info": {
		"_postman_id": "9eef0cdc-bff1-40be-8b26-d7af4398a68b",
		"name": "Mimecast 2.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2548874",
		"_collection_link": "https://grey-satellite-118553.postman.co/workspace/Mimecast~3b367574-1302-457f-a437-54ae8b79c1e5/collection/2548874-9eef0cdc-bff1-40be-8b26-d7af4398a68b?action=share&source=collection_link&creator=2548874"
	},
	"item": [
		{
			"name": "Account Management",
			"item": [
				{
					"name": "Get Dashboard Notifications",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"accountCode\": \"{{accountCode}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/account/get-dashboard-notifications",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"account",
								"get-dashboard-notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Support Info",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/account/get-support-info",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"account",
								"get-support-info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Packages",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/provisioning/get-packages",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"provisioning",
								"get-packages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Config Snapshot",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"backupType\": \"your_backup_type_here\",\n            \"comment\": \"your_comment_here\",\n            \"name\": \"your_snapshot_name_here\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/config-snapshot/v1/create",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"config-snapshot",
								"v1",
								"create"
							]
						},
						"description": "Request Body Description:\n\n- The request body must contain an array with exactly one item.\n- The object within the array has the following fields:\n    - backupType (required): A string specifying the type of snapshot. Supported values are 'managedsenders', 'managedurls', 'profilegroups'.\n    - comment: A string for any additional comments to identify the snapshot.\n    - name (required): A string specifying the name of the snapshot."
					},
					"response": []
				},
				{
					"name": "Export Config Snapshot",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"exportSource\": \"your_export_source_guid_here\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/config-snapshot/v1/export",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"config-snapshot",
								"v1",
								"export"
							]
						},
						"description": "Request Body Description:\n\n- The request body must include an array with exactly one item.\n    \n- The object in the array should have the following field:\n    \n    - exportSource (required): This is the GUID of the snapshot you want to export. The value should be the specific GUID corresponding to the snapshot you intend to export."
					},
					"response": []
				},
				{
					"name": "List Config Snapshots",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"backupType\": \"your_backup_type_here\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/config-snapshot/v1/list",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"config-snapshot",
								"v1",
								"list"
							]
						},
						"description": "Request Body Description:\n\n- The request body must contain an array with exactly one item.\n    \n- The object within the array has the following field:\n    \n    - backupType (required): A string specifying the type of snapshot. Supported values are 'managedsenders', 'managedurls', 'profilegroups'. This field determines the type of configuration snapshots to list."
					},
					"response": []
				},
				{
					"name": "Restore Config Snapshot",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"backupType\": \"your_backup_type_here\",\n            \"mode\": \"your_restore_mode_here\",\n            \"restoreSource\": \"your_restore_source_guid_here\",\n            \"scope\": {\n                \"unit\": \"your_scoped_restore_unit_here\",\n                \"value\": [\"your_scoped_restore_value_here\"]\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/config-snapshot/v1/restore",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"config-snapshot",
								"v1",
								"restore"
							]
						},
						"description": "Request Body Description:\n\n- The request body should include an array with exactly one item.\n    \n- The object in the array should have the following fields:\n    \n    - backupType (required): Type of snapshot to restore. Supported values: 'managedsenders', 'managedurls', 'profilegroups'.\n        \n    - mode (required): Restore mode. Supported values: 'append', 'overwrite'.\n        \n    - restoreSource (required): GUID of the snapshot to restore from.\n        \n    - scope (required): Scope of the restore, containing:\n        \n        - unit (required): Scoped restore unit. For 'managedsenders' type: 'all', 'recipient'. For 'managedurls' type: 'all', 'blocked', 'permitted'. For 'profilegroups' type: 'all', 'groupid'.\n            \n        - value: Array of scoped restore values. For 'managedsenders': array of email addresses. For 'profilegroups': array with one group ID."
					},
					"response": []
				}
			]
		},
		{
			"name": "Audit Events",
			"item": [
				{
					"name": "Get Archive Search Logs",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"query\": \"your_search_query_here\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/archive/get-archive-search-logs",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"archive",
								"get-archive-search-logs"
							]
						},
						"description": "Request Body Description:\n\n- The request body should include an array with at most one item.\n    \n- The object in the array should have the following field:\n    \n    - query: A string representing the text to search within the logs. This can include email addresses or other text identifiers relevant to the archive search."
					},
					"response": []
				},
				{
					"name": "Get Search Logs",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"end\": \"yyyy-MM-dd'T'HH:mm:ssZ\", \n            \"query\": \"your_search_query_here\",\n            \"start\": \"yyyy-MM-dd'T'HH:mm:ssZ\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/archive/get-search-logs",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"archive",
								"get-search-logs"
							]
						},
						"description": "Request Body Description:\n\n- The request body should include an array with at most one item.\n    \n- The object in the array should have the following fields:\n    \n    - end: A string representing the latest search log to return, formatted as 'yyyy-MM-dd'T'HH:mm:ssZ'. Defaults to the end of the current day.\n        \n    - query: A string representing the text to search within the logs, which can include email addresses.\n        \n    - start: A string representing the earliest search log to return, formatted as 'yyyy-MM-dd'T'HH:mm:ssZ'. Defaults to the start of the current day."
					},
					"response": []
				},
				{
					"name": "Get View Logs",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"end\": \"yyyy-MM-dd'T'HH:mm:ssZ\", \n            \"query\": \"your_query_text_here\",\n            \"start\": \"yyyy-MM-dd'T'HH:mm:ssZ\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/archive/get-view-logs",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"archive",
								"get-view-logs"
							]
						},
						"description": "Request Body Description:\n\n- The request body should include an array with at most one item.\n    \n- The object in the array should have the following fields:\n    \n    - end: A string representing the end date in ISO 8601 date time format (e.g. 2011-12-03T10:15:30+0000).\n        \n    - query: A string for the query text that filters across viewer, message from, message to, and subject fields.\n        \n    - start: A string representing the start date in ISO 8601 date time format (e.g. 2011-12-03T10:15:30+0000)."
					},
					"response": []
				},
				{
					"name": "Get Audit Events",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"categories\": [\"category_code_1\", \"category_code_2\"],\n            \"endDateTime\": \"yyyy-MM-dd'T'HH:mm:ssZ\",\n            \"query\": \"your_query_text_here\",\n            \"startDateTime\": \"yyyy-MM-dd'T'HH:mm:ssZ\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/audit/get-audit-events",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"audit",
								"get-audit-events"
							]
						},
						"description": "Request Body Description:\n\n- The request body should include an array with exactly one item.\n    \n- The object in the array should have the following fields:\n    \n    - categories: An array of audit category types. Use values from the 'code' response field from the /api/audit/get-categories endpoint. If no categories are provided, all categories are returned.\n        \n    - endDateTime (required): A string representing the end date in ISO 8601 date time format (e.g., 2011-12-03T10:15:30+0000).\n        \n    - query: A string to search within the audit events.\n        \n    - startDateTime (required): A string representing the start date in ISO 8601 format (e.g., 2011-12-03T10"
					},
					"response": []
				},
				{
					"name": "Get Audit Categories",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "api.services.mimecast.com/api/audit/get-categories",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"audit",
								"get-categories"
							]
						},
						"description": "Description:\n\n- The \"Get Audit Categories\" API endpoint is used to retrieve a list of available audit categories.\n    \n- The endpoint does not require any specific parameters in the request body.\n    \n- The response includes an array of objects, each representing an audit category, with fields such as 'code', 'id', and 'name'."
					},
					"response": []
				},
				{
					"name": "Get Held Release Logs",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"end\": \"yyyy-MM-dd'T'HH:mm:ssZ\",\n            \"filterBy\": [\n                {\n                    \"searchBy\": {\n                        \"fieldName\": \"your_field_name_here\",\n                        \"value\": \"your_search_value_here\"\n                    }\n                }\n            ],\n            \"start\": \"yyyy-MM-dd'T'HH:mm:ssZ\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/gateway/get-held-release-logs",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"gateway",
								"get-held-release-logs"
							]
						},
						"description": "Description:\n\n- The \"Get Held Release Logs\" API endpoint retrieves messages that were released or expired in the held queue.\n- Required request body fields:\n    - end: The end date for the results in ISO 8601 format (default is the current date).\n    - start: The start date for the results in ISO 8601 format (default is one month before the current date).\n    - filterBy: An array of filters to apply to the search results. Each filter includes:\n        - searchBy: An object specifying the field and value for the filter.\n            - fieldName: The field to be filtered (e.g., 'operator', 'from', 'to', 'subject', 'info', 'heldReason').\n            - value: The value to apply to the filter.\n\n2023-12-23T18:22:10Z"
					},
					"response": []
				},
				{
					"name": "Get Rejections",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"admin\": false,\n            \"end\": \"yyyy-MM-dd'T'HH:mm:ssZ\",\n            \"mailbox\": \"your_mailbox_here\",\n            \"searchBy\": {\n                \"fieldName\": \"your_field_name_here\",\n                \"value\": \"your_search_value_here\"\n            },\n            \"start\": \"yyyy-MM-dd'T'HH:mm:ssZ\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/gateway/get-rejections",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"gateway",
								"get-rejections"
							]
						},
						"description": "Description:\n\n- The \"Get Rejections\" API endpoint retrieves information about rejected messages and reasons for their rejection.\n    \n- Required request body fields:\n    \n    - admin: A boolean indicating if the request is for admin (true) or user-level (false). Defaults to false.\n        \n    - end: The end date for the results in ISO 8601 format (default is the current date).\n        \n    - mailbox: The specific user's mailbox for which to get rejections. If 'admin' is true and no mailbox is provided, rejections for all users are returned.\n        \n    - searchBy: An object specifying the field and value for filtering the search.\n        \n        - fieldName: The field to be filtered (e.g., 'from', 'to', 'type', 'info', 'remoteIp').\n            \n        - value: The value to apply to the filter.\n            \n    - start: The start date for the results in ISO 8601 format (default is the start of the current day)."
					},
					"response": []
				}
			]
		},
		{
			"name": "Awareness Training",
			"item": [
				{
					"name": "Get Performance Details",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"attributeIds\": [\"attribute_id_1\", \"attribute_id_2\"],\n            \"filterBy\": [\n                {\n                    \"fieldName\": \"type\",\n                    \"value\": \"video_count_all\"\n                }\n            ],\n            \"includeUserDetails\": false,\n            \"searchBy\": [\n                {\n                    \"attributeId\": \"your_attribute_id_here\",\n                    \"fieldName\": \"your_field_name_here\",\n                    \"value\": \"your_search_value_here\"\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/awareness-training/company/get-performance-details",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"awareness-training",
								"company",
								"get-performance-details"
							]
						},
						"description": "Description:\n\n- The \"Get Performance Details\" API endpoint retrieves user level performance details for Awareness Training Modules by Department and Performance Type.\n    \n- Request body fields:\n    \n    - attributeIds: Array of Mimecast secure IDs for attributes (maximum 3 IDs).\n        \n    - filterBy: Array to filter by specific video counts. 'fieldName' should be 'type', and 'value' can be one of several 'video_count_' options. Default is 'video_count_all'.\n        \n    - includeUserDetails: Boolean to include user details in response. Default is false.\n        \n    - searchBy: Array of search parameters for specific user information. Values can be 'name', 'email', 'department', or 'customAttribute'. 'attributeId' is required when 'customAttribute' is used."
					},
					"response": []
				},
				{
					"name": "Get Performance Summary",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/awareness-training/company/get-performance-summary",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"awareness-training",
								"company",
								"get-performance-summary"
							]
						},
						"description": "Description:\n\n- The \"Get Performance Summary\" API endpoint retrieves a company-level performance summary for the Awareness Training Mime|OS Training Module, focusing on total user answer count.\n    \n- This endpoint does not require any specific parameters in the request body, making the process straightforward and convenient for quick data retrieval."
					},
					"response": []
				},
				{
					"name": "Get Safe Score Details",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"attributeIds\": [\"attribute_id_1\", \"attribute_id_2\", \"attribute_id_3\"],\n            \"filterBy\": [\n                {\n                    \"fieldName\": \"type\",\n                    \"value\": \"A\"\n                }\n            ],\n            \"searchBy\": [\n                {\n                    \"fieldName\": \"your_field_name_here\",\n                    \"value\": \"your_search_value_here\"\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/awareness-training/company/get-safe-score-details",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"awareness-training",
								"company",
								"get-safe-score-details"
							]
						},
						"description": "Description:\n\n- The \"Get Safe Score Details\" API endpoint provides user-level details and grades for the Awareness Training SAFE Score.\n    \n- Request body fields:\n    \n    - attributeIds: An array of Mimecast secure IDs for attributes (maximum 3 IDs). Required when 'searchBy' is set to 'customAttribute'.\n        \n    - filterBy: An array to filter by specific grade scores (A-F). 'fieldName' should be 'type', and 'value' should be a grade letter.\n        \n    - searchBy: An array of search parameters for specific user information. Possible values include 'name', 'email', 'department', or 'customAttribute'."
					},
					"response": []
				},
				{
					"name": "Get Safe Score Summary",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/awareness-training/company/get-safe-score-summary",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"awareness-training",
								"company",
								"get-safe-score-summary"
							]
						},
						"description": "Description:\n\n- The \"Get Safe Score Summary\" API endpoint provides a company-level summary of the SAFE Score for Awareness Training, focusing on User Count per User Risk Grade.\n    \n- This endpoint does not require any specific parameters in the request body, making it straightforward for quick data retrieval related to user risk assessment."
					},
					"response": []
				},
				{
					"name": "Get Watchlist Details",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"attributeIds\": [\"attribute_id_1\", \"attribute_id_2\", \"attribute_id_3\"],\n            \"filterBy\": [\n                {\n                    \"fieldName\": \"type\",\n                    \"value\": \"video_count_1_or_more\"\n                }\n            ],\n            \"searchBy\": [\n                {\n                    \"attributeId\": \"your_attribute_id_here\",\n                    \"fieldName\": \"your_field_name_here\",\n                    \"value\": \"your_search_value_here\"\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/awareness-training/company/get-watchlist-details",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"awareness-training",
								"company",
								"get-watchlist-details"
							]
						},
						"description": "Description:\n\n- The \"Get Watchlist Details\" API endpoint provides user-level watchlist details for the Awareness Training Module, sorted by department and watchlist type.\n    \n- Request body fields:\n    \n    - attributeIds: An array of Mimecast secure IDs for attributes (maximum 3 IDs), required when 'searchBy' is set to 'custom'.\n        \n    - filterBy: An array to filter by specific watchlist video counts. 'fieldName' should be 'type', and 'value' can be one of the specified 'video_count_' options. Default value is 'video_count_1_or_more'.\n        \n    - searchBy: An array of search parameters for specific user information. Possible values include 'name', 'email', 'department', or 'customAttribute'. 'attributeId' is required when 'customAttribute' is used."
					},
					"response": []
				},
				{
					"name": "Get Watchlist Summary",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/awareness-training/company/get-watchlist-summary",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"awareness-training",
								"company",
								"get-watchlist-summary"
							]
						},
						"description": "Description:\n\n- The \"Get Watchlist Summary\" API endpoint provides a company-level summary of the Awareness Training Mime|OS Training Module, focusing on the total user unwatched count.\n    \n- This endpoint does not require any specific parameters in the request body, making it straightforward for quick data retrieval related to the company's watchlist status."
					},
					"response": []
				},
				{
					"name": "Get Campaign",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"id\": \"your_campaign_id_here\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/awareness-training/phishing/campaign/get-campaign",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"awareness-training",
								"phishing",
								"campaign",
								"get-campaign"
							]
						},
						"description": "Description:\n\n- The \"Get Campaign\" API endpoint retrieves all campaign-level information on Awareness Training Mime|OS Phishing Campaigns, including both pending and launched campaigns.\n    \n- Request body field:\n    \n    - id (required): The Mimecast secure ID of an existing phishing campaign. If no ID is provided, all campaigns will be returned. Replace 'your_campaign_id_here' with the specific campaign ID you want to query, or leave it blank to get information on all campaigns."
					},
					"response": []
				},
				{
					"name": "Get User Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"attributeIds\": [\"attribute_id_1\", \"attribute_id_2\", \"attribute_id_3\"],\n            \"filterBy\": [\n                {\n                    \"fieldName\": \"status\",\n                    \"value\": \"sent\"\n                }\n            ],\n            \"id\": \"your_campaign_id_here\",\n            \"searchBy\": {\n                \"fieldName\": \"your_field_name_here\",\n                \"value\": \"your_search_value_here\"\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/awareness-training/phishing/campaign/get-user-data",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"awareness-training",
								"phishing",
								"campaign",
								"get-user-data"
							]
						},
						"description": "Description:\n\n- The \"Get User Data\" API endpoint provides an aggregated summary of Awareness Training Mime|OS Phishing Campaigns, grouped by recipient email address.\n    \n- Request body fields:\n    \n    - attributeIds: An array of Mimecast secure IDs for attributes, required when 'searchBy' is set to 'custom' (maximum 3 IDs).\n        \n    - filterBy: An array to filter by specific user statuses. 'fieldName' should be 'status', and 'value' can be 'sent', 'opened', 'clicked', or 'submitted'.\n        \n    - id (required): The Mimecast secure ID of the phishing campaign. This ID can be retrieved using the /api/awareness-training/phishing/campaign/get-campaign endpoint.\n        \n    - searchBy: An object with search parameters for specific user information. Possible values include 'name', 'email', 'department', or 'customAttribute'."
					},
					"response": []
				},
				{
					"name": "Get Queue",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/awareness-training/queue/get-queue",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"awareness-training",
								"queue",
								"get-queue"
							]
						},
						"description": "Description:\n\n- The \"Get Queue\" API endpoint retrieves all module-level information on Awareness Training Mime|OS Training Modules, including both pending and launched modules.\n    \n- Pre-requisites: To use this endpoint, the assigned app role must have the following level of application permissions granted: Awareness Training | Dashboard | Read.\n    \n- HTTP request URL: [https://api.services.mimecast.com/api/awareness-training/queue/get-queue](https://api.services.mimecast.com/api/awareness-training/queue/get-queue)"
					},
					"response": []
				},
				{
					"name": "Get Training Details",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/awareness-training/user/get-training-details",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"awareness-training",
								"user",
								"get-training-details"
							]
						},
						"description": "Description:\n\n- The \"Get Training Details\" API endpoint provides user enrollment and completion information on Awareness Training Mime|OS Training Modules.\n    \n- Pre-requisites: To use this endpoint, the assigned app role must have the following level of application permissions granted: Awareness Training | Dashboard | Read.\n    \n- HTTP request URL: [https://api.services.mimecast.com/api/awareness-training/user/get-training-details](https://api.services.mimecast.com/api/awareness-training/user/get-training-details)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Data Retention",
			"item": [
				{
					"name": "Get File",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"id\": \"your_file_id_here\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/archive/get-file",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"archive",
								"get-file"
							]
						},
						"description": "Description:\n\n- The \"Get File\" API endpoint retrieves the file or attachment for a given ID.\n    \n- Pre-requisites: To use this endpoint for retrieving the file or attachment, the assigned app role must have at least the following level of application permissions granted: Archive | Read. No administrator permissions are required to retrieve files for the logged-in user or an address that the logged-in user has delegate permission for.\n    \n- HTTP request URL: [https://api.services.mimecast.com/api/archive/get-file](https://api.services.mimecast.com/api/archive/get-file)\n    \n- Request Body: The request body must contain exactly 1 item with the required 'id' field representing the secure ID of the file or attachment."
					},
					"response": []
				},
				{
					"name": "Get Message Detail",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"id\": \"your_message_id_here\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/archive/get-message-detail",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"archive",
								"get-message-detail"
							]
						},
						"description": "Description:\n\n- The \"Get Message Detail\" API endpoint retrieves archived message details.\n    \n- Pre-requisites: To successfully use this endpoint to load any archived message for any user, the assigned app role must have at least the following level of application permissions granted: Archive | Search Content View. No administrator permissions are required to load messages sent or received by the logged-in user or an address that the logged-in user has delegate permission for.\n    \n- HTTP request URL: [https://api.services.mimecast.com/api/archive/get-message-detail](https://api.services.mimecast.com/api/archive/get-message-detail)\n    \n- Request Body: The request body must contain exactly 1 item with the required 'id' field representing the Mimecast ID of the message to return. This ID is typically obtained from a message listing endpoint, such as /api/archive/get-message-list or /api/archive/search."
					},
					"response": []
				},
				{
					"name": "Get Message List",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"end\": \"your_end_date_here\",\n            \"includeAliases\": true,\n            \"includeDelegates\": false,\n            \"mailbox\": \"your_email_address_here\",\n            \"start\": \"your_start_date_here\",\n            \"view\": \"your_message_list_type_here\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/archive/get-message-list",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"archive",
								"get-message-list"
							]
						},
						"description": "Description:\n\n- The \"Get Message List\" API endpoint retrieves an archive message list.\n    \n- Pre-requisites: To successfully use this endpoint to request message lists for any user, the assigned app role must have at least the following level of application permissions granted: Archive | Search | Read. No administrator permissions are required to request message lists for the logged-in user or an address that the logged-in user has delegate permission for.\n    \n- HTTP request URL: [https://api.services.mimecast.com/api/archive/get-message-list](https://api.services.mimecast.com/api/archive/get-message-list)\n    \n- Request Body: The request body must contain exactly 1 item with the following fields:\n    \n    - 'end' (string): The end date of messages to return, in the format yyyy-MM-dd'T'HH:mm:ssZ. Default is the end of the current day.\n        \n    - 'includeAliases' (boolean): Include messages for alias addresses of the mailbox. Default is true.\n        \n    - 'includeDelegates' (boolean): Include messages for addresses that the mailbox has delegate permissions to. Default is false.\n        \n    - 'mailbox' (string): The email address to return the message list for. If excluded, then messages for the logged-in user are returned.\n        \n    - 'start' (string): The start date of messages to return, in the format yyyy-MM-dd'T'HH:mm:ssZ. Default is the last calendar month.\n        \n    - 'view' (string): The message list type, must be one of: INBOX or SENT.\n        \n\nValid 'view' values:\n\n- INBOX\n    \n- SENT"
					},
					"response": []
				},
				{
					"name": "Get Message Part",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"context\": \"DELIVERED\",\n            \"extractFromHtml\": true,\n            \"id\": \"your_message_id_here\",\n            \"mailbox\": \"your_email_address_here\",\n            \"stripDangerous\": true,\n            \"stripImg\": false,\n            \"stripStyles\": false,\n            \"transposeInlineCID\": false,\n            \"type\": \"HTML\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/archive/get-message-part",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"archive",
								"get-message-part"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Archive",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"admin\": false,\n            \"query\": \"your_search_query_here\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/archive/search",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"archive",
								"search"
							]
						},
						"description": "Description:\n\n- The \"Search Archive\" API endpoint retrieves archive search items based on the provided query.\n    \n- Pre-requisites: To successfully use this endpoint to search across a customer's entire archive, the assigned app role must have at least the following level of application permissions granted: Archive | Search | Read. No administrator permissions are required to search for messages for the logged-in user or an address that the logged-in user has delegate permission for.\n    \n- HTTP request URL: [https://api.services.mimecast.com/api/archive/search](https://api.services.mimecast.com/api/archive/search)\n    \n- Request Body: The request body must contain exactly 1 item with the following fields:\n    \n    - 'admin' (boolean): Defines if the search is an administrative search or an end-user search. Defaults to false.\n        \n    - 'query' (string, required): The query string for the search. Please refer to the \"Building Search Queries\" guide for more information on building search queries.\n        \n\nIf you have any more requests or need further assistance, please feel free to ask."
					},
					"response": []
				}
			]
		},
		{
			"name": "Domain Management",
			"item": [
				{
					"name": "Create Domain",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"domain\": \"your_domain_name_here\",\n            \"inboundType\": \"smtp\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/domain/create-domain",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"domain",
								"create-domain"
							]
						},
						"description": "Description:\n\n- The \"Create Domain\" API endpoint allows you to add new domains to your Mimecast account.\n    \n- Pre-requisites: To successfully use this endpoint, the role assigned to the app must have at least the following level of application permissions granted: Directories | Internal | Register New Domain.\n    \n- Notes:\n    \n    - This endpoint initiates the registration of a new domain with Mimecast and returns a code for the domain owner to add as a TXT record to the domain, enabling Mimecast to verify ownership.\n        \n    - If the requested domain is already managed by any account, it will NOT be registered again.\n        \n    - If the domain's parent domain is managed by the same account, the domain will be registered as an internal domain without a verification code.\n        \n    - If the parent domain is managed by a different account, the domain will NOT be registered.\n        \n- HTTP request URL: [https://api.services.mimecast.com/api/domain/create-domain](https://api.services.mimecast.com/api/domain/create-domain)\n    \n- Request Body: The request body must contain an array with at least 1 and up to 50 items, each being an object with the following fields:\n    \n    - 'domain' (string, required): The domain name to be provisioned (without '@').\n        \n    - 'inboundType' (string): The inbound checks for the domain, which must be one of - any (Accept Any Address), smtp (SMTP Call Forward), ldap (LDAP Users Only), known (Known Recipients Only).\n        \n\nValid 'inboundType' values:\n\n- any\n    \n- smtp\n    \n- ldap\n    \n- known"
					},
					"response": []
				},
				{
					"name": "Delete Pending Domain",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"domain\": \"your_pending_domain_name_here\",\n            \"id\": \"your_domain_id_here\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/domain/delete-pending-domain",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"domain",
								"delete-pending-domain"
							]
						},
						"description": "Description:\n\n- The \"Delete Pending Domain\" API endpoint allows you to delete a pending domain from your Mimecast account.\n    \n- Pre-requisites: To successfully use this endpoint, the role assigned to the app must have at least the following level of application permissions granted: Directories | Internal | Register New Domain.\n    \n- HTTP request URL: [https://api.services.mimecast.com/api/domain/delete-pending-domain](https://api.services.mimecast.com/api/domain/delete-pending-domain)\n    \n- Request Body: The request body must contain an array with 1 to 500 items, each being an object with the following fields:\n    \n    - 'domain' (string, required): The pending domain name to delete (without '@').\n        \n    - 'id' (string, required): The Mimecast secure ID of the domain to be deleted. You can find this ID using the /api/domain/get-pending-domains endpoint."
					},
					"response": []
				},
				{
					"name": "Get Internal Domain",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"domain\": \"your_domain_name_here\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/domain/get-internal-domain",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"domain",
								"get-internal-domain"
							]
						},
						"description": "Description:\n\n- The \"Get Internal Domain\" API endpoint allows you to retrieve information about an internal domain in your Mimecast account.\n    \n- Pre-requisites: To successfully use this endpoint, the role assigned to the app must have at least the following level of application permissions granted: Directories | Internal | Read.\n    \n- HTTP request URL: [https://api.services.mimecast.com/api/domain/get-internal-domain](https://api.services.mimecast.com/api/domain/get-internal-domain)\n    \n- Request Body: The request body must contain an array with at most 500 items, each being an object with the following field:\n    \n    - 'domain' (string, required): The domain name for which you want to retrieve information."
					},
					"response": []
				},
				{
					"name": "Get Pending Domain",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"domain\": \"your_domain_name_here\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/domain/get-pending-domain",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"domain",
								"get-pending-domain"
							]
						},
						"description": "Description:\n\n- The \"Get Pending Domain\" API endpoint allows you to retrieve information about a pending domain in your Mimecast account.\n    \n- Pre-requisites: To successfully use this endpoint, the role assigned to the app must have at least the following level of application permissions granted: Directories | Internal | Register New Domain.\n    \n- HTTP request URL: [https://api.services.mimecast.com/api/domain/get-pending-domain](https://api.services.mimecast.com/api/domain/get-pending-domain)\n    \n- Request Body: The request body must contain an array with at most 500 items, each being an object with the following field:\n    \n    - 'domain' (string, required): The domain name for which you want to retrieve information."
					},
					"response": []
				},
				{
					"name": "Get Provision Status",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"domain\": \"your_domain_name_here\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/domain/get-provision-status",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"domain",
								"get-provision-status"
							]
						},
						"description": "Description:\n\n- The \"Get Provision Status\" API endpoint allows you to retrieve the provision status of a domain in your Mimecast account.\n    \n- Pre-requisites: To successfully use this endpoint, the role assigned to the app must have at least the following level of application permissions granted: Directories | Internal | Register New Domain.\n    \n- HTTP request URL: [https://api.services.mimecast.com/api/domain/get-provision-status](https://api.services.mimecast.com/api/domain/get-provision-status)\n    \n- Request Body: The request body must contain an array with 1 to 50 items, each being an object with the following field:\n    \n    - 'domain' (string, required): The domain name to return (without '@')."
					},
					"response": []
				},
				{
					"name": "Get Verification Code",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"domain\": \"your_domain_name_here\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/domain/get-verification-code",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"domain",
								"get-verification-code"
							]
						},
						"description": "Description:\n\n- The \"Get Verification Code\" API endpoint allows you to retrieve the verification code for a domain in your Mimecast account.\n    \n- Pre-requisites: To successfully use this endpoint, the role assigned to the app must have at least the following level of application permissions granted: Directories | Internal | Register New Domain.\n    \n- HTTP request URL: [https://api.services.mimecast.com/api/domain/get-verification-code](https://api.services.mimecast.com/api/domain/get-verification-code)\n    \n- Request Body: The request body must contain an array with 1 to 50 items, each being an object with the following field:\n    \n    - 'domain' (string, required): The domain name to return (without '@')."
					},
					"response": []
				},
				{
					"name": "Verify Domain",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"domain\": \"your_domain_name_here\",\n            \"inboundType\": \"your_inbound_type_here\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/domain/verify-domain",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"domain",
								"verify-domain"
							]
						},
						"description": "Description:\n\n- The \"Verify Domain\" API endpoint allows you to verify a domain in your Mimecast account.\n    \n- Pre-requisites: To successfully use this endpoint, the role assigned to the app must have at least the following level of application permissions granted: Directories | Internal | Register New Domain.\n    \n- HTTP request URL: [https://api.services.mimecast.com/api/domain/verify-domain](https://api.services.mimecast.com/api/domain/verify-domain)\n    \n- Request Body: The request body must contain an array with 1 to 50 items, each being an object with the following fields:\n    \n    - 'domain' (string, required): The domain name to be verified (without '@').\n        \n    - 'inboundType' (string): The inbound checks for the domain, which must be one of the following:\n        \n        - 'any' (Accept Any Address)\n            \n        - 'smtp' (SMTP Call Forward)\n            \n        - 'ldap' (LDAP Users Only)\n            \n        - 'known' (Known Recipients Only)\n            \n\nPlease replace \"your_domain_name_here\" with the domain name you want to verify (without '@') and \"your_inbound_type_here\" with the inbound type you require.\n\nIf you have any more requests or need further assistance, please feel free to ask."
					},
					"response": []
				}
			]
		},
		{
			"name": "Email Security Cloud Gateway",
			"item": [
				{
					"name": "Get Email Queues",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"end\": \"your_end_date_here\",\n            \"start\": \"your_start_date_here\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/email/get-email-queues",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"email",
								"get-email-queues"
							]
						},
						"description": "Description:\n\n- The \"Get Email Queues\" API endpoint allows you to retrieve the count of the inbound and outbound email queues at specified times.\n- Pre-requisites: To successfully use this endpoint, the role assigned to the app must have at least the following level of application permissions granted: Account | Dashboard | Read.\n- HTTP request URL: [https://api.services.mimecast.com/api/email/get-email-queues](https://api.services.mimecast.com/api/email/get-email-queues)\n- Request Body: The request body must contain an array with exactly 1 item, which is an object with the following fields:\n    - 'end' (string, required): The most recent date of message queues in the format 'yyyy-MM-dd'T'HH:mm:ssZ'.\n    - 'start' (string, required): The earliest date of message queues in the format 'yyyy-MM-dd'T'HH:mm:ssZ'.\n\nPlease replace \"your_end_date_here\" and \"your_start_date_here\" with the specific date and time values you want to query."
					},
					"response": []
				},
				{
					"name": "Send Email",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"attachments\": [],\n            \"bcc\": [],\n            \"cc\": [],\n            \"extraHeaders\": [],\n            \"from\": {\n                \"displayableName\": \"\",\n                \"emailAddress\": \"your_email_address_here\"\n            },\n            \"htmlBody\": {\n                \"charset\": \"\",\n                \"content\": \"\"\n            },\n            \"plainBody\": {\n                \"charset\": \"\",\n                \"content\": \"\"\n            },\n            \"subject\": \"your_email_subject_here\",\n            \"to\": [\n                {\n                    \"displayableName\": \"\",\n                    \"emailAddress\": \"recipient_email_address_here\"\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/email/send-email",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"email",
								"send-email"
							]
						},
						"description": "Description:\n\n- The \"Send Email\" API endpoint allows you to send an email using Mimecast.\n    \n- Pre-requisites: To successfully use this endpoint, the role assigned to the app must have at least the following level of application permissions granted: Account | Dashboard | Read.\n    \n- HTTP request URL: [https://api.services.mimecast.com/api/email/send-email](https://api.services.mimecast.com/api/email/send-email)\n    \n- Request Body: The request body must contain an array with 1 to 500 items, each being an object with the following fields:\n    \n    - 'attachments' (array): List of attachment details (empty array if no attachments).\n        \n    - 'bcc' (array): List of recipient's email addresses as BCC (empty array if no BCC recipients).\n        \n    - 'cc' (array): List of recipient's email addresses as CC (empty array if no CC recipients).\n        \n    - 'extraHeaders' (array): Email headers (empty array if no extra headers).\n        \n    - 'from' (object): From email address, with 'displayableName' (optional) and 'emailAddress' (required).\n        \n    - 'htmlBody' (object): HTML part of the email body with 'charset' and 'content'.\n        \n    - 'plainBody' (object): Plain text part of the email body with 'charset' and 'content'.\n        \n    - 'subject' (string, required): Email subject.\n        \n    - 'to' (array): List of recipient's email addresses as TO with 'displayableName' (optional) and 'emailAddress' (required).\n        \n\nPlease replace the placeholders ('your_email_address_here', 'recipient_email_address_here', 'your_email_subject_here', etc.) with your actual email details and content.\n\nIf you have any more requests or need further assistance, please feel free to ask."
					},
					"response": []
				},
				{
					"name": "File Upload",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream"
							},
							{
								"key": "x-mc-arg",
								"value": "{ \"data\": [ { \"sha256\":\"String\", \"fileSize\":31232 } ] }"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/path/to/your/file.txt"
								}
							]
						},
						"url": {
							"raw": "api.services.mimecast.com/api/file/file-upload",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"file",
								"file-upload"
							]
						},
						"description": "Description:\n\n- The \"File Upload\" API endpoint allows you to upload a file to be attached and sent in an email using Mimecast.\n    \n- Pre-requisites: To successfully use this endpoint, the role assigned to the app must have at least the following level of application permissions granted: Account | Dashboard | Read.\n    \n- HTTP request URL: [https://api.services.mimecast.com/api/file/file-upload](https://api.services.mimecast.com/api/file/file-upload)\n    \n- Header Parameters:\n    \n    - 'x-mc-arg' (string): A Header containing a JSON object with 'data' array, specifying the file's SHA256 hash and fileSize.\n        \n    - Request Body: File uploaded as multipart form data with input stream in 'application/octet-stream' format.\n        \n\nPlease replace \"/path/to/your/file.txt\" with the actual path to the file you want to upload. Also, ensure that the 'x-mc-arg' header contains the correct SHA256 hash and fileSize information for your file.\n\nIf you have any more requests or need further assistance, please feel free to ask."
					},
					"response": []
				},
				{
					"name": "Find Processing Messages",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"value": "{\n    \"end\": \"2024-01-24T00:00:00Z\",\n    \"filterBy\": [],\n    \"searchBy\": {\n        \"fieldName\": \"ALL\",\n        \"value\": \"\"\n    },\n    \"sortBy\": \"createTime\",\n    \"sortOrder\": \"desc\",\n    \"start\": \"2024-01-17T00:00:00Z\",\n    \"type\": \"processing\"\n}"
								}
							]
						},
						"url": {
							"raw": "api.services.mimecast.com/api/gateway/find-processing-messages",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"gateway",
								"find-processing-messages"
							]
						},
						"description": "Description:\n\n- The \"Find Processing Messages\" API endpoint allows you to retrieve messages that are currently being processed by Mimecast.\n- Pre-requisites: To successfully use this endpoint, the role assigned to the app must have at least the following level of application permissions granted: Monitoring | Processing | Read.\n- HTTP request URL: [https://api.services.mimecast.com/api/gateway/find-processing-messages](https://api.services.mimecast.com/api/gateway/find-processing-messages)\n- Request Body: The request body must contain an array 'data' with exactly 1 item, which is an object with the following fields:\n    - 'end' (string, required): The end date of results to return in ISO 8601 format (e.g., \"2024-01-24T00:00:00Z\").\n    - 'filterBy' (array): Filters by route and attachment to apply to results (empty array if no filters).\n    - 'searchBy' (object): Accepts search filter field and value to apply when searching, with 'fieldName' and 'value'.\n    - 'sortBy' (string): The field to sort results by, must be \"createTime\".\n    - 'sortOrder' (string): Sort results in order according to date, possible values are \"asc\" or \"desc\".\n    - 'start' (string, required): The start date of results to return in ISO 8601 format (e.g., \"2024-01-17T00:00:00Z\").\n    - 'type' (string): The message queue type to return, possible values are \"processing\" (default) or \"bulk_processing\".\n\nPlease customize the values in the request body to filter and retrieve the desired processing messages."
					},
					"response": []
				},
				{
					"name": "Get Hold Message List",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"value": "{\n    \"admin\": false,\n    \"end\": \"2024-01-24T00:00:00Z\",\n    \"searchBy\": {\n        \"fieldName\": \"all\",\n        \"value\": \"\"\n    },\n    \"start\": \"2024-01-17T00:00:00Z\"\n}"
								}
							]
						},
						"url": {
							"raw": "api.services.mimecast.com/api/gateway/get-hold-message-list",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"gateway",
								"get-hold-message-list"
							]
						},
						"description": "Description:\n\n- The \"Get Hold Message List\" API endpoint allows you to retrieve information about held messages, including the reason, hold level, sender, and recipients. The ID can be used to take action on a message using the Release Message or Reject Message API endpoints.\n    \n- Pre-requisites: To successfully use this endpoint, the role assigned to the app must have at least the following level of application permissions granted: Account | Dashboard | Read.\n    \n- HTTP request URL: [https://api.services.mimecast.com/api/gateway/get-hold-message-list](https://api.services.mimecast.com/api/gateway/get-hold-message-list)\n    \n- Request Body: The request body must contain an array 'data' with exactly 1 item, which is an object with the following fields:\n    \n    - 'admin' (boolean): Level of results to return. If false, only results for the currently authenticated user will be returned. If true, held messages for all recipients will be returned. The default value is false.\n        \n    - 'end' (string, required): The date and time of the latest message to return in ISO 8601 format (e.g., \"2024-01-24T00:00:00Z\").\n        \n    - 'searchBy' (object): Object data used to filter results, including 'fieldName' (Message fields to filter based on, possible values: all, subject, sender, recipient, reasonCode, senderIP) and 'value' (The text used to filter results).\n        \n    - 'start' (string, required): The date and time of the earliest message to return in ISO 8601 format (e.g., \"2024-01-17T00:00:00Z\").\n        \n\nPlease customize the values in the request body to filter and retrieve the desired held messages."
					},
					"response": []
				},
				{
					"name": "Get Hold Summary List",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "api.services.mimecast.com/api/gateway/get-hold-summary-list",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"gateway",
								"get-hold-summary-list"
							]
						},
						"description": "Description:\n\n- The \"Get Hold Summary List\" API endpoint allows you to retrieve counts of currently held messages for each hold reason. Hold reasons can reference policy actions or definition names.\n    \n- Pre-requisites: To successfully use this endpoint, the role assigned to the app must have at least the following level of application permissions granted: Account | Monitoring | Held Summary | Read.\n    \n- HTTP request URL: [https://api.services.mimecast.com/api/gateway/get-hold-summary-list](https://api.services.mimecast.com/api/gateway/get-hold-summary-list)\n    \n\nThis API endpoint does not require a request body, and you can directly send the request to retrieve hold summary information.\n\nIf you have any more requests or need further assistance, please feel free to ask."
					},
					"response": []
				},
				{
					"name": "Hold Reject",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"ids\": [\"mimecast_secure_id_1\", \"mimecast_secure_id_2\"],\n            \"message\": \"Rejection message here\",\n            \"notify\": false,\n            \"reasonType\": \"MESSAGE CONTAINS UNDESIRABLE CONTENT\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/gateway/hold-reject",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"gateway",
								"hold-reject"
							]
						},
						"description": "Description:\n\n- The \"Hold-Reject\" API endpoint is used to reject a currently held message based on the Find Held Messages API endpoint.\n    \n- Request body fields:\n    \n    - ids (required): An array of Mimecast secure IDs for messages to be rejected.\n        \n    - message: A rejection message to be returned to the sender.\n        \n    - notify: A boolean to deliver a rejection notification to the sender. Default is false.\n        \n    - reasonType: The reason code for rejecting the message. Possible values include 'MESSAGE CONTAINS UNDESIRABLE CONTENT', 'MESSAGE CONTAINS CONFIDENTIAL INFORMATION', 'REVIEWER DISAPPROVES OF CONTENT', 'INAPPROPRIATE COMMUNICATION', 'MESSAGE GOES AGAINST EMAIL POLICIES'."
					},
					"response": []
				},
				{
					"name": "Hold Release",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"[Your Mimecast secure id]\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/gateway/hold-release",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"gateway",
								"hold-release"
							]
						},
						"description": "### Release Held Message API\n\n**Description:**  \nThis API endpoint allows you to release a currently held message based on the Find Held Messages API endpoint.\n\n**Pre-requisites:**  \nTo successfully use this endpoint, the app's role must have the following level of application permissions granted: Account | Monitoring | Held | Edit.\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/gateway/hold-release`\n    \n- Content-Type: application/json\n    \n\n**Request Body (required):**\n\n- Structure: JSON object with a \"data\" array containing 1 to 25 items.\n    \n- Each item in the \"data\" array must have:\n    \n    - \"id\" (required): The Mimecast secure id of a message, which can be found using the Find Held Messages API endpoint.\n        \n\n**Example Request Body:**\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"[Your Mimecast secure id]\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "message/get-file",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"[Your secure ID]\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/gateway/message/get-file",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"gateway",
								"message",
								"get-file"
							]
						},
						"description": "### Get File or Attachment API\n\n**Description:**  \nThis API endpoint allows you to retrieve the file or attachment for a given ID. Replace `[Your secure ID]` in the request body with the actual secure ID of the file or attachment you want to retrieve.\n\n**Pre-requisites:**  \nTo successfully use this endpoint, the app's role must have the following level of application permissions granted: Account | Dashboard | Read.\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/gateway/message/get-file`\n    \n- Content-Type: application/json\n    \n\n**Request Body (required):**\n\n- Structure: JSON object with a \"data\" array containing exactly 1 item.\n    \n- Each item in the \"data\" array must have:\n    \n    - \"id\" (required): The secure ID of the file or attachment.\n        \n\n**Example Request Body:**\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"[Your secure ID]\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "journaling/get-service",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/journaling/get-service",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"journaling",
								"get-service"
							]
						},
						"description": "### Get Journaling Connectors API\n\n**Description:**  \nThis API endpoint returns journaling connectors, their configuration, and current status.\n\n**Pre-requisites:**  \nTo successfully use this endpoint, the app's role must have the following level of application permissions granted: Services | Journaling | Read.\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/journaling/get-service`\n    \n- Content-Type: application/json\n    \n\n**Request Body:**\n\n- Structure: An empty JSON object ({}).\n    \n\n**Example Request Body:**\n\n``` json\n{}\n\n ```"
					},
					"response": []
				},
				{
					"name": "managedsender/permit-or-block-sender",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"action\": \"[Choose to either 'permit' or 'block']\",\n      \"sender\": \"[Sender's email address]\",\n      \"to\": \"[Recipient's email address]\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/managedsender/permit-or-block-sender",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"managedsender",
								"permit-or-block-sender"
							]
						},
						"description": "### Permit or Block Sender API\n\n**Pre-requisites:**  \nTo successfully use this endpoint, the app's role must have the following level of application permissions granted: Gateway | Managed Senders | Edit.\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/managedsender/permit-or-block-sender`\n    \n- Content-Type: application/json\n    \n\n**Request Body (required):**\n\n- Structure: JSON object with a \"data\" array containing from 1 to 100 items.\n    \n- Each item in the \"data\" array must have:\n    \n    - \"action\" (required): Choose to either 'permit' (to bypass spam checks) or 'block' (to reject the email).\n        \n    - \"sender\" (required): The email address of the sender to permit or block.\n        \n    - \"to\" (required): The email address of the recipient to permit or block.\n        \n\n**Example Request Body:**\n\n``` json\n{\n  \"data\": [\n    {\n      \"action\": \"permit\",\n      \"sender\": \"sender@example.com\",\n      \"to\": \"recipient@example.com\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "message-finder/get-message-info",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"[Your Mimecast ID]\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/message-finder/get-message-info",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"message-finder",
								"get-message-info"
							]
						},
						"description": "### Get Message Info API\n\n**Pre-requisites:**  \nTo successfully use this endpoint, the app's role must have the following level of application permissions granted: Gateway | Tracking | Read.\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/message-finder/get-message-info`\n    \n- Content-Type: application/json\n    \n\n**Request Body (required):**\n\n- Structure: JSON object with a \"data\" array containing exactly 1 item.\n    \n- Each item in the \"data\" array must have:\n    \n    - \"id\" (required): The Mimecast ID of the message to load. This is returned by the /api/message-finder/search endpoint. Replace `[Your Mimecast ID]` with the actual Mimecast ID of the message you want to retrieve information about.\n        \n\n**Example Request Body:**\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"[Your Mimecast ID]\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "message-finder/search",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"advancedTrackAndTraceOptions\": {\n        \"from\": \"[Sending email address or domain]\",\n        \"senderIP\": \"[Source IP address]\",\n        \"subject\": \"[Subject]\",\n        \"to\": \"[Recipient email address or domain]\",\n        \"url\": \"[URL from email content]\",\n        \"attachments\": [true or false],\n        \"end\": \"[Latest message date and time]\",\n        \"messageId\": \"[Internet message ID]\",\n        \"route\": [\"route values\"],\n        \"searchReason\": \"[Reason for Tracking]\",\n        \"start\": \"[Earliest message date and time]\",\n        \"status\": [\"email status values\"]\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/message-finder/search",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"message-finder",
								"search"
							]
						},
						"description": "### Search Messages API\n\n**Pre-requisites:**  \nTo successfully use this endpoint, the app's role must have the following level of application permissions granted: Gateway | Tracking | Read.\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/message-finder/search`\n    \n- Content-Type: application/json\n    \n\n**Request Body (required):**\n\n- Structure: JSON object with a \"data\" array containing exactly 1 item.\n    \n- The item in the \"data\" array must have an \"advancedTrackAndTraceOptions\" object with various filter options to customize the tracking query."
					},
					"response": []
				},
				{
					"name": "ttp/url/decode-url",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"url\": \"[Mimecast encoded URL]\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/ttp/url/decode-url",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"ttp",
								"url",
								"decode-url"
							]
						},
						"description": "### Decode URL API\n\n**Pre-requisites:**  \nTo successfully use this endpoint, the app's role must have the following level of application permissions granted: Account | Dashboard | Read.\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/ttp/url/decode-url`\n    \n- Content-Type: application/json\n    \n\n**Request Body (required):**\n\n- Structure: JSON object with a \"data\" array containing from 1 to 25 items.\n    \n- Each item in the \"data\" array must have:\n    \n    - \"url\" (required): The Mimecast encoded URL (e.g., [https://protect-xx.mimecast.com/](https://protect-xx.mimecast.com/)...)."
					},
					"response": []
				}
			]
		},
		{
			"name": "Policy Management",
			"item": [
				{
					"name": "address-alteration/create-address-alteration-set",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"description\": \"[Name of Address Alteration Set]\",\n      \"parentId\": \"[Mimecast secure id of existing alteration set]\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/policy/address-alteration/create-address-alteration-set",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"address-alteration",
								"create-address-alteration-set"
							]
						},
						"description": "### Create Address Alteration Set API\n\n**Pre-requisites:**  \nTo successfully use this endpoint, the app's role must have the following level of application permissions granted: Gateway | Policies | Edit.\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/policy/address-alteration/create-address-alteration-set`\n    \n- Content-Type: application/json\n    \n\n**Request Body (required):**\n\n- Structure: JSON object with a \"data\" array containing exactly 1 item.\n    \n- The item in the \"data\" array must have:\n    \n    - \"description\" (required): The name of the Address Alteration Set (folder) to be created.\n        \n    - \"parentId\": The Mimecast secure id of an existing alteration set to nest the newly created set under. If no parentId is specified, the new set will be created under the root."
					},
					"response": []
				},
				{
					"name": "address-alteration/create-definition",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"addressAlterations\": [\n        {\n          \"folderId\": \"[Mimecast secure id of Address Alteration Set]\",\n          \"definitionName\": \"[Address Alteration Definition Name]\",\n          \"matchExpression\": \"[Match Expression]\",\n          \"replacementExpression\": \"[Replacement Expression]\"\n        }\n      ]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/policy/address-alteration/create-definition",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"address-alteration",
								"create-definition"
							]
						},
						"description": "### Create Address Alteration Definition API\n\n**Pre-requisites:**  \nTo successfully use this endpoint, the app's role must have the following level of application permissions granted: Gateway | Policies | Edit.\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/policy/address-alteration/create-definition`\n    \n- Content-Type: application/json\n    \n\n**Request Body (required):**\n\n- Structure: JSON object with a \"data\" array containing exactly 1 item.\n    \n- The item in the \"data\" array must have an \"addressAlterations\" array with the details of the Address Alteration definitions to create.\n    \n    - Each definition must have:\n        \n        - \"folderId\": The Mimecast secure id of an Address Alteration Set. If none is provided, the definition will be created under the root and will apply to messages without an associated policy.\n            \n        - \"definitionName\": The name of the Address Alteration Definition.\n            \n        - \"matchExpression\": The match expression.\n            \n        - \"replacementExpression\": The replacement expression.\n            \n\nCurrently, records created via API call are limited to 3000. Additional records can be created within the Administration Console."
					},
					"response": []
				},
				{
					"name": "address-alteration/create-policy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"addressAlterationSetId\": \"[Mimecast secure id of Address Alteration Set]\",\n      \"policy\": {\n        \"bidirectional\": [true or false],\n        \"comment\": \"[Policy Comment]\",\n        \"conditions\": {\n          \"description\": \"[Conditions Description]\",\n          \"enabled\": [true or false],\n          \"enforced\": [true or false],\n          \"from\": {\n            \"fromDate\": \"[Start Date]\",\n            \"fromEternal\": [true or false],\n            \"fromPart\": \"[From Part]\",\n            \"override\": [true or false]\n          },\n          \"to\": {\n            \"toDate\": \"[End Date]\",\n            \"toEternal\": [true or false]\n          }\n        }\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/policy/address-alteration/create-policy",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"address-alteration",
								"create-policy"
							]
						},
						"description": "### Create Address Alteration Policy API\n\n**Pre-requisites:**  \nTo successfully use this endpoint, the app's role must have the following level of application permissions granted: Gateway | Policies | Edit.\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/policy/address-alteration/create-policy`\n    \n- Content-Type: application/json\n    \n\n**Request Body (required):**\n\n- Structure: JSON object with a \"data\" array containing exactly 1 item.\n    \n- The item in the \"data\" array must have:\n    \n    - \"addressAlterationSetId\" (required): The Mimecast secure id of the Address Alteration Set (folder) that will be applied by this policy.\n        \n    - \"policy\" (required): An object with conditions that determine when to apply the alteration set.\n        \n        - \"bidirectional\": If true, will also apply the policy in reverse email flow of the defined by this policy. Default value is false.\n            \n        - \"comment\": A comment about the policy.\n            \n        - \"conditions\": Conditions of the sending platform to determine if the policy should be considered.\n            \n            - \"description\": The description for the policy, which will also be stored with any applied message in the archive for future reference.\n                \n            - \"enabled\": If set to true, the policy will apply to any messages within the policy scope. Default value is true.\n                \n            - \"enforced\": Determines if the policy should be enforced. Default value is false.\n                \n            - \"from\": Scope of application based on the sender address. If not specified, the default will apply to everyone.\n                \n                - \"fromDate\": The start date that the policy should begin to apply in ISO 8601 date time format (e.g. 2011-12-03T10:15:30+0000). If defined, this will override the \"fromEternal\" value to false.\n                    \n                - \"fromEternal\": If set to true, the policy will apply as soon as it is created and enabled. Default value is true.\n                    \n                - \"fromPart\": Specifies that the from address should be considered based on the envelope, header, or either address. Default value is envelope_from.\n                    \n            - \"to\": Scope of application based on the recipient address. If not specified, the default will apply to everyone.\n                \n                - \"toDate\": The end date that the policy should cease to apply in ISO 8601 date time format (e.g. 2011-12-03T10:15:30+0000). If defined, this will override the \"toEternal\" value to false.\n                    \n                - \"toEternal\": If set to true, the policy will have no end date applied. Default value is true."
					},
					"response": []
				},
				{
					"name": "address-alteration/delete-definition",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"[Mimecast secure id of Address Alteration Definition]\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/policy/address-alteration/delete-definition",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"address-alteration",
								"delete-definition"
							]
						},
						"description": "### Delete Address Alteration Definition API\n\n**Pre-requisites:**  \nTo successfully use this endpoint, the app's role must have the following level of application permissions granted: Gateway | Policies | Edit.\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/policy/address-alteration/delete-definition`\n    \n- Content-Type: application/json\n    \n\n**Request Body (required):**\n\n- Structure: JSON object with a \"data\" array containing exactly 1 item.\n    \n- The item in the \"data\" array must have:\n    \n    - \"id\" (required): The Mimecast secure id of an Address Alteration definition to be deleted.\n        \n\n**Example Request Body:**\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"fake_id_12345\"  # Replace with the actual Mimecast secure id of the Address Alteration Definition you want to delete.\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "address-alteration/delete-policy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"[Mimecast secure id of Address Alteration Policy]\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/policy/address-alteration/delete-policy",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"address-alteration",
								"delete-policy"
							]
						},
						"description": "### Delete Address Alteration Policy API\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/policy/address-alteration/delete-policy`\n    \n- Content-Type: application/json\n    \n\n**Request Body (required):**\n\n- Structure: JSON object with a \"data\" array containing from 1 to 500 items.\n    \n- Each item in the \"data\" array must have:\n    \n    - \"id\" (required): The Mimecast secure id of the policy to be deleted.\n        \n\n**Example Request Body:**\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"fake_policy_id_123\"  # Replace with the actual Mimecast secure id of the Address Alteration Policy you want to delete.\n    },\n    {\n      \"id\": \"fake_policy_id_456\"  # Another example policy id (replace with real id if needed).\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "address-alteration/get-address-alteration-set",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"depth\": 1,\n      \"folderId\": \"[Mimecast secure id of Address Alteration Set]\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/policy/address-alteration/get-address-alteration-set",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"address-alteration",
								"get-address-alteration-set"
							]
						},
						"description": "### Get Address Alteration Set API\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/policy/address-alteration/get-address-alteration-set`\n    \n- Content-Type: application/json\n    \n\n**Request Body:**\n\n- Structure: JSON object with a \"data\" array containing at most 1 item.\n    \n- Each item in the \"data\" array must have:\n    \n    - \"depth\": Integer (int32) representing the Address Alteration Set depth to recurse. Default value is 1.\n        \n    - \"folderId\" (required): The Mimecast secure id of the alteration set (folder). If none is specified, all sets will be returned.\n        \n\n**Example Request Body:**\n\n``` json\n{\n  \"data\": [\n    {\n      \"depth\": 1,\n      \"folderId\": \"MIMEC-SET-12345\"  # Replace with the actual Mimecast secure id of the Address Alteration Set you want to retrieve.\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "address-alteration/get-definition",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"folderId\": \"[Folder ID]\",\n      \"newAddress\": \"[New Address]\",\n      \"originalAddress\": \"[Original Address]\",\n      \"routing\": \"[Routing]\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/policy/address-alteration/get-definition",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"address-alteration",
								"get-definition"
							]
						},
						"description": "### Get Address Alteration Definition API\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/policy/address-alteration/get-definition`\n    \n- Content-Type: application/json\n    \n\n**Request Body:**\n\n- Structure: JSON object with a \"data\" array containing exactly 1 item (optional fields).\n    \n- Available Fields (optional):\n    \n    - \"folderId\": The folder containing one or more address alteration definitions.\n        \n    - \"newAddress\": The new address structure (format: localPart@domainPart, @domainPart, localPart@).\n        \n    - \"originalAddress\": The original address being considered for rewrite (format: localPart@domainPart, @domainPart, localPart@).\n        \n    - \"routing\": The address alteration definition route (Possible values: all, inbound, outbound).\n        \n\n**Example Request Body:**\n\n``` json\n{\n  \"data\": [\n    {\n      \"folderId\": \"MIMEC-FOLDER-12345\",\n      \"newAddress\": \"user@domain.com\",\n      \"routing\": \"all\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "address-alteration/get-policy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"[Mimecast secure id of policy]\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/policy/address-alteration/get-policy",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"address-alteration",
								"get-policy"
							]
						},
						"description": "### Get Address Alteration Policy API\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/policy/address-alteration/get-policy`\n    \n- Content-Type: application/json\n    \n\n**Request Body:**\n\n- Structure: JSON object with a \"data\" array containing at most 500 items.\n    \n- Each item in the \"data\" array must have:\n    \n    - \"id\" (required): The Mimecast secure id of the policy. If omitted, all policies will be returned.\n        \n\n**Example Request Body:**\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"MIMEC-POLICY-12345\"  # Replace with the actual Mimecast secure id of the policy you want to retrieve.\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "address-alteration/update-policy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"addressAlterationSetId\": \"[Mimecast secure id of Address Alteration Set]\",\n      \"id\": \"[Mimecast secure id of policy]\",\n      \"policy\": {\n        \"bidirectional\": false,\n        \"comment\": \"\",\n        \"conditions\": {},\n        \"description\": \"\",\n        \"enabled\": true,\n        \"enforced\": false,\n        \"from\": {},\n        \"fromDate\": \"\",\n        \"fromEternal\": true,\n        \"fromPart\": \"envelope_from\",\n        \"override\": false,\n        \"to\": {},\n        \"toDate\": \"\",\n        \"toEternal\": true\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/policy/address-alteration/update-policy",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"address-alteration",
								"update-policy"
							]
						},
						"description": "### Update Address Alteration Policy API\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/policy/address-alteration/update-policy`\n    \n- Content-Type: application/json\n    \n\n**Request Body:**\n\n- Structure: JSON object with a \"data\" array containing exactly 1 item.\n    \n- The item in the \"data\" array must have:\n    \n    - \"addressAlterationSetId\" (required): The Mimecast secure id of the Address Alteration Set (folder) that will be applied by this policy.\n        \n    - \"id\" (required): The Mimecast secure id of the Address Alteration policy to be modified.\n        \n    - \"policy\": An object with conditions that determine when to apply the alteration set (see below for details).\n        \n\n**Policy Object:**\n\n- \"bidirectional\": (boolean) If true, will also apply the policy in reverse email flow. Default value is false.\n    \n- \"comment\": (string) A comment about the policy.\n    \n- \"conditions\": (object) Conditions of the sending platform to determine if the policy should be considered.\n    \n- \"description\": (string) The description for the policy (name).\n    \n- \"enabled\": (boolean) If set to true, the policy will apply to messages within the policy scope. Default value is true.\n    \n- \"enforced\": (boolean) Determines if the policy should be enforced. Default value is false.\n    \n- \"from\": (object) Scope of application based on the sender address.\n    \n- \"fromDate\": (string) The start date that the policy should begin to apply in ISO 8601 date time format. If defined, this will override \"fromEternal\" value to false.\n    \n- \"fromEternal\": (boolean) If set to true, the policy will apply as soon as it is created and enabled. Default value is true.\n    \n- \"fromPart\": (string) Specifies that the from address should be considered based on the envelope, header, or both address. Default value is envelope_from.\n    \n- \"override\": (boolean) If set to true, this policy will be considered for application prior to other policies of the same type. Default value is false.\n    \n- \"to\": (object) Scope of application based on the recipient address.\n    \n- \"toDate\": (string) The end date that the policy should cease to apply in ISO 8601 date time format.\n    \n- \"toEternal\": (boolean) Should the policy continue to apply, regardless of the current date and time.\n    \n\n**Example Request Body:**\n\n``` json\n{\n  \"data\": [\n    {\n      \"addressAlterationSetId\": \"MIMEC-SET-12345\",\n      \"id\": \"MIMEC-POLICY-56789\",\n      \"policy\": {\n        \"bidirectional\": false,\n        \"comment\": \"Updated policy for address alteration\",\n        \"conditions\": {},\n        \"description\": \"Updated Address Alteration Policy\",\n        \"enabled\": true,\n        \"enforced\": false,\n        \"from\": {},\n        \"fromDate\": \"\",\n        \"fromEternal\": true,\n        \"fromPart\": \"envelope_from\",\n        \"override\": false,\n        \"to\": {},\n        \"toDate\": \"\",\n        \"toEternal\": true\n      }\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "antispoofing-bypass/create-policy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"option\": \"[policy action]\",\n      \"policy\": {\n        \"bidirectional\": false,\n        \"comment\": \"\",\n        \"conditions\": {},\n        \"description\": \"\",\n        \"enabled\": true,\n        \"enforced\": false,\n        \"from\": {},\n        \"fromDate\": \"\",\n        \"fromEternal\": true,\n        \"fromPart\": \"envelope_from\",\n        \"override\": false,\n        \"to\": {},\n        \"toDate\": \"\",\n        \"toEternal\": true\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/policy/antispoofing-bypass/create-policy",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"antispoofing-bypass",
								"create-policy"
							]
						}
					},
					"response": []
				},
				{
					"name": "antispoofing-bypass/delete-policy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"[Mimecast secure id of existing policy]\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/policy/antispoofing-bypass/delete-policy",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"antispoofing-bypass",
								"delete-policy"
							]
						},
						"description": "### Delete Anti-Spoofing SPF Bypass Policy API\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/policy/antispoofing-bypass/delete-policy`\n    \n- Content-Type: application/json\n    \n\n**Request Body:**\n\n- Structure: JSON object with a \"data\" array containing from 1 to 500 items.\n    \n- Each item in the \"data\" array must have:\n    \n    - \"id\" (required): The Mimecast secure id of the existing policy to delete. Use `/api/policy/antispoofing-bypass/get-policy` to obtain the id.\n        \n\n**Example Request Body:**\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"MIMEC-POLICY-12345\"  # Replace with the actual Mimecast secure id of the existing policy to delete.\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "antispoofing-bypass/get-policy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"[Mimecast secure id of existing policy]\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/policy/antispoofing-bypass/get-policy",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"antispoofing-bypass",
								"get-policy"
							]
						},
						"description": "**Get Anti-Spoofing SPF Bypass Policy API**\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/policy/antispoofing-bypass/get-policy`\n    \n- Content-Type: application/json\n    \n\n**Request Body:**\n\n- Structure: JSON object with a \"data\" array containing at most 500 items.\n    \n- Each item in the \"data\" array must have:\n    \n    - \"id\": The Mimecast secure id of an existing policy. Omit this field to obtain all policies.\n        \n\n**Example Request Body:**\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"MIMEC-POLICY-12345\"  # Replace with the actual Mimecast secure id of the policy you want to retrieve.\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "antispoofing-bypass/update-policy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"[Mimecast secure id of existing policy]\",\n      \"option\": \"[policy action]\",\n      \"policy\": {\n        \"bidirectional\": [true or false],\n        \"comment\": \"[comment]\",\n        \"conditions\": {\n          \"headerFromDomain\": \"[headerFromDomain]\",\n          \"subjectContains\": \"[subjectContains]\",\n          \"messageSizeGreaterThanOrEqual\": [messageSizeGreaterThanOrEqual]\n        },\n        \"description\": \"[description]\",\n        \"enabled\": [true or false],\n        \"enforced\": [true or false],\n        \"from\": {\n          \"address\": \"[sender email address]\"\n        },\n        \"fromDate\": \"[fromDate]\",\n        \"fromEternal\": [true or false],\n        \"fromPart\": \"[envelope_from, header_from, or both]\",\n        \"override\": [true or false],\n        \"to\": {\n          \"address\": \"[recipient email address]\"\n        },\n        \"toDate\": \"[toDate]\",\n        \"toEternal\": [true or false]\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/policy/antispoofing-bypass/update-policy",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"antispoofing-bypass",
								"update-policy"
							]
						},
						"description": "**Update Anti-Spoofing SPF Bypass Policy API**\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/policy/antispoofing-bypass/update-policy`\n    \n- Content-Type: application/json\n    \n\n**Request Body:**\n\n- Structure: JSON object with a \"data\" array containing exactly 1 item.\n    \n- Each item in the \"data\" array must have:\n    \n    - \"id\" (required): The Mimecast secure id of an existing policy. Use /api/policy/antispoofing-bypass/get-policy to obtain the id.\n        \n    - \"option\" (required): The policy action to be taken. Must be disable_bypass or enable_bypass.\n        \n    - \"policy\": The policy scoping details with various parameters.\n        \n\n**Example Request Body:**\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"MIMEC-POLICY-12345\",\n      \"option\": \"disable_bypass\",\n      \"policy\": {\n        \"bidirectional\": false,\n        \"comment\": \"Disabling SPF Bypass\",\n        \"conditions\": {\n          \"headerFromDomain\": \"example.com\",\n          \"subjectContains\": \"important\",\n          \"messageSizeGreaterThanOrEqual\": 5000\n        },\n        \"description\": \"Disable SPF Bypass Policy\",\n        \"enabled\": true,\n        \"enforced\": false,\n        \"from\": {\n          \"address\": \"sender@example.com\"\n        },\n        \"fromDate\": \"2024-01-30T08:00:00+0000\",\n        \"fromEternal\": false,\n        \"fromPart\": \"both\",\n        \"override\": false,\n        \"to\": {\n          \"address\": \"recipient@example.com\"\n        },\n        \"toDate\": \"2024-02-15T08:00:00+0000\",\n        \"toEternal\": false\n      }\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "blocked-senders/create-policy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"option\": \"no_action\",\n      \"policy\": {\n        \"bidirectional\": false,\n        \"comment\": \"Sample Blocked Sender Policy\",\n        \"conditions\": {},\n        \"description\": \"Sample Blocked Sender Policy\",\n        \"enabled\": true,\n        \"enforced\": false,\n        \"from\": {\n          \"fromPart\": \"envelope_from\"\n        },\n        \"to\": {\n          \"toEternal\": true\n        }\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/policy/blockedsenders/create-policy",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"blockedsenders",
								"create-policy"
							]
						},
						"description": "**Create Blocked Sender Policy API**\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/policy/blockedsenders/create-policy`\n    \n- Content-Type: application/json\n    \n\n**Request Body:**\n\n- Structure: JSON object with a \"data\" array containing exactly 1 item.\n    \n- Each item in the \"data\" array must have:\n    \n    - \"option\" (required): A string that defines a policy action, must be one of: no_action, block_sender.\n        \n    - \"policy\" (required): A policy object with various parameters.\n        \n\n**Example Request Body:**\n\n``` json\n{\n  \"data\": [\n    {\n      \"option\": \"no_action\",\n      \"policy\": {\n        \"bidirectional\": false,\n        \"comment\": \"This policy allows all senders without restrictions.\",\n        \"conditions\": {\n          \"headerFromDomain\": \"example.com\",\n          \"subjectContains\": \"important\",\n          \"messageSizeGreaterThanOrEqual\": 5000\n        },\n        \"description\": \"Allow all senders with certain conditions.\",\n        \"enabled\": true,\n        \"enforced\": false,\n        \"from\": {\n          \"fromPart\": \"header_from\"\n        },\n        \"to\": {\n          \"toEternal\": false\n        }\n      }\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "blockedsenders/get-policy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"[Mimecast ID of blocked sender policy]\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "api.services.mimecast.com/api/policy/blockedsenders/get-policy",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"blockedsenders",
								"get-policy"
							]
						},
						"description": "**Get Blocked Sender Policies API**\n\n**HTTP Request:**\n\n- Method: POST\n    \n- URL: `https://api.services.mimecast.com/api/policy/blockedsenders/get-policy`\n    \n- Content-Type: application/json\n    \n\n**Request Body:**\n\n- Structure: JSON object with a \"data\" array containing at most 500 items.\n    \n- Each item in the \"data\" array must have:\n    \n    - \"id\" (required): The Mimecast ID of the blocked sender policy to return. If not included, all Blocked Sender Policies will be returned.\n        \n\n**Example Request Body:**\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"MIMECAST-BLOCKED-POLICY-12345\"  # Replace with the actual Mimecast ID of the policy you want to retrieve.\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "webwhiteurl/create-policy-with-targets",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"description\": \"Sample description of the policy.\",\n      \"policies\": [],\n      \"urls\": [\n        {\n          \"action\": \"allow\",\n          \"id\": \"\",\n          \"type\": \"url\",\n          \"value\": \"example.com\"\n        }\n      ]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/policy/webwhiteurl/create-policy-with-targets",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"webwhiteurl",
								"create-policy-with-targets"
							]
						},
						"description": "## Create Policy with Targets\n\nCreates a Web Security Block or Allow List policy for domains or URLs.\n\n**Endpoint**: `POST https://api.services.mimecast.com/api/policy/webwhiteurl/create-policy-with-targets`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Web Security | Policies | Edit' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `description`: A string describing the policy for future reference.\n    \n- `policies`: An array containing policy scoping details.\n    \n- `urls`: An array of objects, each containing:\n    \n    - `action`: (required) The action to be taken, `allow` or `block`.\n        \n    - `id`: The Mimecast secure ID of the web white URL, optional for creating new.\n        \n    - `type`: (required) The type of entry, `url` or `domain`.\n        \n    - `value`: (required) The URL or domain to be blocked or allowed.\n        \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"description\": \"Allow list policy for trusted domains\",\n      \"policies\": [],\n      \"urls\": [\n        {\n          \"action\": \"allow\",\n          \"type\": \"domain\",\n          \"value\": \"trusteddomain.com\"\n        },\n        {\n          \"action\": \"block\",\n          \"type\": \"url\",\n          \"value\": \"http://untrusteddomain.com\"\n        }\n      ]\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "webwhiteurl/delete-policy-with-targets",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"sample-id\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/policy/webwhiteurl/delete-policy-with-targets",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"webwhiteurl",
								"delete-policy-with-targets"
							]
						},
						"description": "## webwhiteurl/delete-policy-with-targets\n\nDeletes an existing Web Security Block or Allow List policy for domains or URLs.\n\n**Endpoint**: `POST https://api.services.mimecast.com/api/policy/webwhiteurl/delete-policy-with-targets`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Web Security | Policies | Edit' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `id`: (required) The Mimecast secure ID of an existing policy to be deleted.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"policy-id-1\"\n    },\n    {\n      \"id\": \"policy-id-2\"\n    }\n    //... additional IDs as needed\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "webwhiteurl/get-policy-with-targets",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"policy-id-example\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/policy/webwhiteurl/get-policy-with-targets",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"webwhiteurl",
								"get-policy-with-targets"
							]
						},
						"description": "## webwhiteurl/get-policy-with-targets\n\nRetrieves information about an existing Web Security Block or Allow List policy for domains or URLs.\n\n**Endpoint**: `POST https://api.services.mimecast.com/api/policy/webwhiteurl/get-policy-with-targets`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Web Security | Policies | Read' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `id`: (required) The Mimecast secure ID of an existing policy.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"policy-id-example\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "webwhiteurl/update-policy-with-targets",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"description\": \"Updated policy description\",\n      \"id\": \"existing-policy-id\",\n      \"policies\": [],\n      \"urls\": [\n        {\n          \"action\": \"block\",\n          \"type\": \"url\",\n          \"value\": \"example.com\"\n        }\n      ]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/policy/webwhiteurl/update-policy-with-targets",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"policy",
								"webwhiteurl",
								"update-policy-with-targets"
							]
						},
						"description": "## webwhiteurl/update-policy-with-targets\n\nUpdates an existing Web Security Block or Allow List policy for domains or URLs.\n\n**Endpoint**: `POST https://api.services.mimecast.com/api/policy/webwhiteurl/update-policy-with-targets`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Web Security | Policies | Edit' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `description`: Optional string describing the policy for future reference.\n    \n- `id`: (required) The Mimecast secure ID of an existing policy to be updated.\n    \n- `policies`: An array containing policy scoping details.\n    \n- `urls`: An array of objects, each containing:\n    \n    - `action`: (required) The action to be taken, `allow` or `block`.\n        \n    - `type`: (required) The type of entry, `url` or `domain`.\n        \n    - `value`: (required) The URL or domain to be blocked or allowed.\n        \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"description\": \"Updated allow list policy for specific domains\",\n      \"id\": \"existing-policy-id\",\n      \"policies\": [],\n      \"urls\": [\n        {\n          \"action\": \"allow\",\n          \"type\": \"domain\",\n          \"value\": \"trusteddomain.com\"\n        },\n        {\n          \"action\": \"block\",\n          \"type\": \"url\",\n          \"value\": \"http://untrusteddomain.com\"\n        }\n      ]\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "ttp/url/create-managed-url",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"action\": \"block\",\n      \"comment\": \"Reason for blocking\",\n      \"disableLogClick\": false,\n      \"disableRewrite\": false,\n      \"disableUserAwareness\": false,\n      \"matchType\": \"explicit\",\n      \"url\": \"http://example.com\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/ttp/url/create-managed-url",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"ttp",
								"url",
								"create-managed-url"
							]
						},
						"description": "## ttp/url/create-managed-url\n\nAdds new managed URL entries for URL Protection. Allows manually blocking or permitting a URL, with options for disabling URL rewriting and bypassing User Awareness.\n\n**Endpoint**: `POST https://api.services.mimecast.com/api/ttp/url/create-managed-url`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Services | Targeted Threat Protection - URL Protect | Edit' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `action`: (required) \"block\" to blacklist, \"permit\" to whitelist the URL.\n    \n- `comment`: Optional comment about why the URL is managed.\n    \n- `disableLogClick`: Boolean, disables logging of user clicks. Default false.\n    \n- `disableRewrite`: Boolean, disables rewriting of this URL in emails. Default false.\n    \n- `disableUserAwareness`: Boolean, disables User Awareness challenges. Default false.\n    \n- `matchType`: \"explicit\" for full URL instances, \"domain\" for any URL with the same domain.\n    \n- `url`: (required) The URL to block or permit. Exclude fragments (#).\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"action\": \"block\",\n      \"comment\": \"Sample comment for blocking\",\n      \"disableLogClick\": false,\n      \"disableRewrite\": false,\n      \"disableUserAwareness\": false,\n      \"matchType\": \"explicit\",\n      \"url\": \"http://example.com\"\n    }\n    // Additional URLs as needed\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "ttp/url/delete-managed-url",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"managed-url-id\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/ttp/url/delete-managed-url",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"ttp",
								"url",
								"delete-managed-url"
							]
						},
						"description": "## ttp/url/delete-managed-url\n\nRemoves an existing Managed URL entry.\n\n**Endpoint**: `POST https://api.services.mimecast.com/api/ttp/url/delete-managed-url`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Services | URL Protection | Edit' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `id`: The Mimecast secure ID of the Managed URL entry to be deleted. The ID can be retrieved using the `/api/ttp/url/get-all-managed-urls` endpoint.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"managed-url-id\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "ttp/url/get-all-managed-urls",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"domainOrComment\": \"\",\n      \"domainOrUrl\": \"\",\n      \"exactMatch\": false,\n      \"filterBy\": [],\n      \"sortByUrl\": false,\n      \"sortOrder\": \"asc\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/ttp/url/get-all-managed-urls",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"ttp",
								"url",
								"get-all-managed-urls"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Security Events",
			"item": [
				{
					"name": "dlp/get-logs",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"actions\": [],\n      \"from\": \"\",\n      \"oldestFirst\": false,\n      \"query\": \"\",\n      \"routes\": [],\n      \"searchField\": \"all\",\n      \"to\": \"\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/dlp/get-logs",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"dlp",
								"get-logs"
							]
						}
					},
					"response": []
				},
				{
					"name": "ttp/attachment/get-logs",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"from\": \"\",\n      \"oldestFirst\": false,\n      \"result\": \"all\",\n      \"route\": \"all\",\n      \"to\": \"\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/ttp/attachment/get-logs",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"ttp",
								"attachment",
								"get-logs"
							]
						},
						"description": "## ttp/attachment/get-logs\n\nRetrieves attachment protection logs.\n\n**Endpoint**: `POST https://api.services.mimecast.com/api/ttp/attachment/get-logs`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Monitoring | Attachment Protection | Read' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `from`: Start date of logs in ISO 8601 format (e.g. 2023-01-01T00:00:00+0000). Default is the start of the current day.\n    \n- `oldestFirst`: Boolean, false for most recent first. Default false.\n    \n- `result`: Filters logs by scan result (safe, malicious, timeout, error, unsafe, or all). Default all.\n    \n- `route`: Filters logs by route (inbound, outbound, internal, or all). Default all.\n    \n- `to`: End date of logs in ISO 8601 format (e.g. 2023-01-31T00:00:00+0000). Default is time of request.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"from\": \"2023-01-01T00:00:00+0000\",\n      \"oldestFirst\": false,\n      \"result\": \"malicious\",\n      \"route\": \"inbound\",\n      \"to\": \"2023-01-31T00:00:00+0000\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "ttp/impersonation/get-logs",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"actions\": [],\n      \"from\": \"\",\n      \"identifiers\": [],\n      \"oldestFirst\": false,\n      \"query\": \"\",\n      \"searchField\": \"all\",\n      \"taggedMalicious\": null,\n      \"to\": \"\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/ttp/impersonation/get-logs",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"ttp",
								"impersonation",
								"get-logs"
							]
						},
						"description": "## ttp/impersonation/get-logs\n\nRetrieves messages flagged by an Impersonation Protection configuration.\n\n**Endpoint**: `POST https://api.services.mimecast.com/api/ttp/impersonation/get-logs`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Monitoring | Impersonation Protection | Read' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `actions`: Array of actions to filter by. Possible values: hold, bounce, none.\n    \n- `from`: Start date in ISO 8601 format (e.g. 2023-01-01T00:00:00+0000).\n    \n- `identifiers`: Array of identifiers like newly_observed_domain, internal_user_name, etc.\n    \n- `oldestFirst`: Boolean, orders results with the most recent first. Default false.\n    \n- `query`: Required if `searchField` is not null. A string to search in the logs.\n    \n- `searchField`: Field to search, such as senderAddress, recipientAddress, subject, policy, all.\n    \n- `taggedMalicious`: Filters messages tagged as malicious (true) or not (false).\n    \n- `to`: End date in ISO 8601 format (e.g. 2023-01-31T00:00:00+0000).\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"actions\": [\"hold\", \"bounce\"],\n      \"from\": \"2023-01-01T00:00:00+0000\",\n      \"identifiers\": [\"newly_observed_domain\", \"internal_user_name\"],\n      \"oldestFirst\": false,\n      \"query\": \"example query\",\n      \"searchField\": \"senderAddress\",\n      \"taggedMalicious\": true,\n      \"to\": \"2023-01-31T00:00:00+0000\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "ttp/url/get-logs",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"from\": \"\",\n      \"oldestFirst\": false,\n      \"route\": \"all\",\n      \"scanResult\": \"all\",\n      \"to\": \"\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/ttp/url/get-logs",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"ttp",
								"url",
								"get-logs"
							]
						},
						"description": "## ttp/url/get-logs\n\nRetrieves URL Protection logs.\n\n**Endpoint**: `POST https://api.services.mimecast.com/api/ttp/url/get-logs`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Monitoring | URL Protection | Read' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `from`: Start date in ISO 8601 format (e.g. 2023-01-01T00:00:00+0000).\n    \n- `oldestFirst`: Boolean, orders results with the most recent first. Default false.\n    \n- `route`: Filters logs by route (inbound, outbound, internal, all). Default all.\n    \n- `scanResult`: Filters logs by scan result (clean, malicious, suspicious, all). Default all.\n    \n- `to`: End date in ISO 8601 format (e.g. 2023-01-31T00:00:00+0000).\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"from\": \"2023-01-01T00:00:00+0000\",\n      \"oldestFirst\": false,\n      \"route\": \"inbound\",\n      \"scanResult\": \"malicious\",\n      \"to\": \"2023-01-31T00:00:00+0000\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				}
			]
		},
		{
			"name": "Threat Management",
			"item": [
				{
					"name": "byo-threat-intelligence/create-batch",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"hashList\": [\n        \"file-hash-1\",\n        \"file-hash-2\"\n      ],\n      \"operationType\": \"BLOCK\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/byo-threat-intelligence/create-batch",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"byo-threat-intelligence",
								"create-batch"
							]
						},
						"description": "## byo-threat-intelligence/create-batch\n\nImports a single or batch of multiple file-hash indicators for specified actions.\n\n**Endpoint**: `POST https://api.services.mimecast.com/api/byo-threat-intelligence/create-batch`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'BYO Threat Intelligence | Upload' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `hashList`: Array of one or more file-hashes to be acted upon.\n    \n- `operationType`: The action based on the batch of indicators. Possible values: BLOCK, DELETE, ALLOW.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"hashList\": [\n        \"file-hash-1\",\n        \"file-hash-2\"\n      ],\n      \"operationType\": \"BLOCK\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "byo-threat-intelligence/delete-batch",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"batch-id-to-delete\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/byo-threat-intelligence/delete-batch",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"byo-threat-intelligence",
								"delete-batch"
							]
						},
						"description": "## byo-threat-intelligence/delete-batch\n\nRemoves a batch of indicators from BYO Threat Intelligence.\n\n**Endpoint**: `POST https://api.services.mimecast.com/api/byo-threat-intelligence/delete-batch`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'BYO Threat Intelligence | Delete' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `id`: The Mimecast secure ID of the batch to be deleted.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"batch-id-to-delete\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "byo-threat-intelligence/get-batches",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"order\": \"desc\",\n      \"sortBy\": \"CREATE_TIME\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/byo-threat-intelligence/get-batches",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"byo-threat-intelligence",
								"get-batches"
							]
						},
						"description": "## byo-threat-intelligence/get-batches\n\nRetrieves information about all existing batches in BYO Threat Intelligence.\n\n**Endpoint**: `POST https://api.services.mimecast.com/api/byo-threat-intelligence/get-batches`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'BYO Threat Intelligence | Read' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `order`: Sorting order of results, ASC for ascending or DESC for descending. Default is DESC.\n    \n- `sortBy`: Criteria for sorting results. Currently, the only option is CREATE_TIME.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"order\": \"desc\",\n      \"sortBy\": \"CREATE_TIME\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "byo-threat-intelligence/get-quota",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/byo-threat-intelligence/get-quota",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"byo-threat-intelligence",
								"get-quota"
							]
						},
						"description": "## byo-threat-intelligence/get-quota\n\nRetrieves the number of indicators in use and the number of remaining indicators that can be added.\n\n**Endpoint**: `POST https://api.services.mimecast.com/api/byo-threat-intelligence/get-quota`\n\n**Pre-requisites**:  \nThe account must have the Bring Your Own Threat Intel package added. Contact your Mimecast Account Manager for access to Bring Your Own Threat Intel.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Request Body**: Not required for this endpoint.\n\n**Example Request**:  \nA POST request to the above endpoint with no body is required to retrieve quota information.\n\n**Note**: This endpoint is useful for managing and monitoring the usage of the Bring Your Own Threat Intel package."
					},
					"response": []
				},
				{
					"name": "ttp/remediation/create",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"end\": \"\",\n      \"hashOrMessageId\": \"\",\n      \"reason\": \"Your reason for remediation\",\n      \"searchBy\": \"\",\n      \"start\": \"\",\n      \"url\": \"\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/ttp/remediation/create",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"ttp",
								"remediation",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "ttp/remediation/find-incidents",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"end\": \"\",\n      \"filterBy\": [],\n      \"searchBy\": {\n        \"fieldName\": \"\",\n        \"value\": \"\"\n      },\n      \"start\": \"\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/ttp/remediation/find-incidents",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"ttp",
								"remediation",
								"find-incidents"
							]
						},
						"description": "## ttp/remediation/find-incidents\n\nSearches for existing remediation incidents.\n\n**Endpoint**: `POST https://api.services.mimecast.com/api/ttp/remediation/find-incidents`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Services | Threat Remediation | Read' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `end`: (Optional) Date and time of the latest incident in ISO 8601 format.\n    \n- `filterBy`: (Optional) Array of filter options to narrow results based on incident type.\n    \n- `searchBy`: (Optional) Object containing the field and value to filter results.\n    \n    - `fieldName`: Incident fields to filter based on (all, code, file_hash, reason).\n        \n    - `value`: Text used to filter results.\n        \n- `start`: (Optional) Date and time of the earliest incident in ISO 8601 format.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"end\": \"2023-02-28T23:59:59+0000\",\n      \"filterBy\": [\"code\"],\n      \"searchBy\": {\n        \"fieldName\": \"reason\",\n        \"value\": \"Suspicious content\"\n      },\n      \"start\": \"2023-01-01T00:00:00+0000\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "ttp/remediation/get-incident",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"incident-id-example\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/ttp/remediation/get-incident",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"ttp",
								"remediation",
								"get-incident"
							]
						},
						"description": "## ttp/remediation/get-incident\n\nRetrieves information about an existing remediation incident.\n\n**Endpoint**: `POST https://api.services.mimecast.com/api/ttp/remediation/get-incident`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Services | Threat Remediation | Read' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `id`: (Required) The Mimecast ID for a remediation incident.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"incident-id-example\"\n    }\n    // Additional incident IDs as needed (up to 25)\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "ttp/remediation/search-hash",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"hashes\": [\n        \"hash1\",\n        \"hash2\"\n      ]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/ttp/remediation/search-hash",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"ttp",
								"remediation",
								"search-hash"
							]
						},
						"description": "## ttp/remediation/search-hash\n\nIdentifies if an account has seen specific file hashes within messages over the last year.\n\n**Endpoint**: `POST https://api.services.mimecast.com/api/ttp/remediation/search-hash`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Services | Threat Remediation | Read' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `hashes`: (Required) Array of file hashes to check if they have been seen within an account.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"hashes\": [\n        \"hash1\",\n        \"hash2\"\n        // Additional hashes as needed (up to 100, but recommended no more than 20 per call)\n      ]\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "ttp/remediation/v2/create",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"end\": \"\",\n      \"messageIds\": [],\n      \"reason\": \"Your reason for remediation\",\n      \"searchBy\": \"\",\n      \"start\": \"\",\n      \"hash\": \"\",\n      \"url\": \"\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/ttp/remediation/v2/create",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"ttp",
								"remediation",
								"v2",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Threats, Security Events, and Data",
			"item": [
				{
					"name": "siem/v1/batch/events/cg",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.services.mimecast.com/siem/v1/batch/events/cg?type=process&dateRangeStartsAt=2023-05-23&dateRangeEndsAt=2023-05-24&nextPage=NDY6bnVsbA==&pageSize=100",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"siem",
								"v1",
								"batch",
								"events",
								"cg"
							],
							"query": [
								{
									"key": "type",
									"value": "process"
								},
								{
									"key": "dateRangeStartsAt",
									"value": "2023-05-23"
								},
								{
									"key": "dateRangeEndsAt",
									"value": "2023-05-24"
								},
								{
									"key": "nextPage",
									"value": "NDY6bnVsbA=="
								},
								{
									"key": "pageSize",
									"value": "100"
								}
							]
						},
						"description": "## siem/v1/batch/events/cg\n\nGets MTA logs in a batched fashion from the SIEM system.\n\n**Endpoint**: `GET https://api.services.mimecast.com/siem/v1/batch/events/cg`\n\n**Pre-requisites**:  \nThe user must be a Mimecast Administrator with 'Security Events and Data Retrieval | Threat and Security Events (SIEM) | Read' permission.\n\n**Query Parameters**:\n\n- `type`: (Optional) Event type and subtype (e.g., 'process' or 'process:Hld').\n    \n- `dateRangeStartsAt`: (Optional) Start date in ISO-8601 full-date format.\n    \n- `dateRangeEndsAt`: (Optional) End date in ISO-8601 full-date format.\n    \n- `nextPage`: (Optional) Pagination key from the previous request.\n    \n- `pageSize`: (Optional) Number of rows per page (1 to 100).\n    \n\n**Example Request**:  \nGET request to the endpoint with query parameters:  \n  \n[https://api.services.mimecast.com/siem/v1/batch/events/cg?type=process&amp;dateRangeStartsAt=2023-05-23&amp;dateRangeEndsAt=2023-05-24&amp;nextPage=NDY6bnVsbA==&amp;pageSize=100](https://null)  \n  \n\n**Note**:\n\n- Logs are available up to 7 days from the current date.\n    \n- The API can be called 50 times within a 15-minute window. Exceeding this may result in a 429 error.\n    \n- For different event types, separate API calls are required.\n    \n- See SIEM Batch Guidelines and SIEM Tutorial pages for more details."
					},
					"response": []
				},
				{
					"name": "siem/v1/events/cg",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"name": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.services.mimecast.com/siem/v1/events/cg?types=process&dateRangeStartsAt=2024-01-25T10:30:45.642Z&dateRangeEndsAt=2024-01-25T13:30:45.642Z&pageSize=100",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"siem",
								"v1",
								"events",
								"cg"
							],
							"query": [
								{
									"key": "types",
									"value": "process"
								},
								{
									"key": "dateRangeStartsAt",
									"value": "2024-01-25T10:30:45.642Z"
								},
								{
									"key": "dateRangeEndsAt",
									"value": "2024-01-25T13:30:45.642Z"
								},
								{
									"key": "pageSize",
									"value": "100"
								},
								{
									"key": "nextPage",
									"value": "NDY6bnVsbA==",
									"disabled": true
								}
							]
						},
						"description": "## siem/v1/events/cg\n\nRetrieves MTA logs with the ability to filter per event, as well as blocked/allowed status.\n\n**Endpoint**: `GET https://api.services.mimecast.com/siem/v1/events/cg`\n\n**Pre-requisites**:  \nThe user must be a Mimecast Administrator with 'Security Events and Data Retrieval | Threat and Security Events (SIEM) | Read' permission.\n\n**Headers**:\n\n- Accept: Desired format for the data (e.g., 'application/json').\n    \n\n**Query Parameters**:\n\n- `types`: (Optional) Event type and subtype (e.g., 'process' or 'process:Hld').\n    \n- `dateRangeStartsAt`: (Optional) Start date in ISO-8601 date-time format.\n    \n- `dateRangeEndsAt`: (Optional) End date in ISO-8601 date-time format.\n    \n- `pageSize`: (Optional) Number of rows per page (1 to 100).\n    \n- `nextPage`: (Optional) Pagination key from the previous request.\n    \n\n**Example Request**:  \n  \nGET request to the endpoint with query parameters:  \n[https://api.services.mimecast.com/siem/v1/events/cg?types=process&amp;dateRangeStartsAt=2023-03-19T13:30:45.642Z&amp;dateRangeEndsAt=2023-03-20T13:30:45.642Z&amp;pageSize=100&amp;nextPage=NDY6bnVsbA==<br><br>](https://null)**Note**:\n\n- Logs are available up to 24 hours from the current date.\n    \n- The API can be called 300 times/hour. Exceeding this may result in a 429 error.\n    \n- For clients with large numbers of events, optional filters are recommended to return a subset of events, or the batch SIEM endpoint can be used for a greater number of events per call.\n    \n- See SIEM Guidelines and SIEM Tutorial pages for more details."
					},
					"response": []
				},
				{
					"name": "threats/v1/stats/attachment-scans",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.services.mimecast.com/threats/v1/stats/attachment-scans?timestampRangeStartsAt=2023-04-17T00:00:00.000+05:30[Asia/Kolkata]&timestampRangeEndsAt=2023-08-18T00:00:00.000+05:30[Asia/Kolkata]",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"threats",
								"v1",
								"stats",
								"attachment-scans"
							],
							"query": [
								{
									"key": "timestampRangeStartsAt",
									"value": "2023-04-17T00:00:00.000+05:30[Asia/Kolkata]"
								},
								{
									"key": "timestampRangeEndsAt",
									"value": "2023-08-18T00:00:00.000+05:30[Asia/Kolkata]"
								}
							]
						},
						"description": "## threats/v1/stats/attachment-scans\n\nRetrieves statistics for attachment scans.\n\n**Endpoint**: `GET https://api.services.mimecast.com/threats/v1/stats/attachment-scans`\n\n**Query Parameters**:\n\n- `timestampRangeStartsAt`: (Required) Start timestamp in extended ISO-8601 format with mandatory time zone. Data available for 24 hours.\n    \n- `timestampRangeEndsAt`: (Optional) End timestamp in extended ISO-8601 format with mandatory time zone. Defaults to current timestamp if not provided. Data available for 24 hours.\n    \n\n**Example Request**:\n\nGET request to the endpoint with query parameters:  \n[https://api.services.mimecast.com/threats/v1/stats/attachment-scans?timestampRangeStartsAt=2023-04-17T00:00:00.000+05:30[Asia/Kolkata]×tampRangeEndsAt=2023-08-18T00:00:00.000+05:30[Asia/Kolkata]<br><br>](https://null)**Note**:\n\n- Ensure correct formatting for the timestamps and time zone.\n    \n- Data is only available for 24 hours from the specified start timestamp."
					},
					"response": []
				},
				{
					"name": "threats/v1/stats/gateway-detections",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.services.mimecast.com/threats/v1/stats/gateway-detections?timestampRangeStartsAt=2023-04-17T00:00:00.000+05:30[Asia/Kolkata]&timestampRangeEndsAt=2023-08-18T00:00:00.000+05:30[Asia/Kolkata]&type=spam",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"threats",
								"v1",
								"stats",
								"gateway-detections"
							],
							"query": [
								{
									"key": "timestampRangeStartsAt",
									"value": "2023-04-17T00:00:00.000+05:30[Asia/Kolkata]"
								},
								{
									"key": "timestampRangeEndsAt",
									"value": "2023-08-18T00:00:00.000+05:30[Asia/Kolkata]"
								},
								{
									"key": "type",
									"value": "spam"
								}
							]
						},
						"description": "## threats/v1/stats/gateway-detections\n\nRetrieves statistics for Gateway Detection threats such as spam or malware.\n\n**Endpoint**: `GET https://api.services.mimecast.com/threats/v1/stats/gateway-detections`\n\n**Query Parameters**:\n\n- `timestampRangeStartsAt`: (Required) Start timestamp in extended ISO-8601 format with mandatory time zone. Data available for 24 hours.\n    \n- `timestampRangeEndsAt`: (Optional) End timestamp in extended ISO-8601 format with mandatory time zone. Defaults to current timestamp if not provided. Data available for 24 hours.\n    \n- `type`: (Required) Type of Gateway Detection threat (e.g., 'spam', 'malware').\n    \n\n**Example Request**:  \n  \nGET request to the endpoint with query parameters:  \n[https://api.services.mimecast.com/threats/v1/stats/gateway-detections?timestampRangeStartsAt=2023-04-17T00:00:00.000+05:30[Asia/Kolkata]×tampRangeEndsAt=2023-08-18T00:00:00.000+05:30[Asia/Kolkata]&amp;type=spam](https://null)\n\n**Note**:\n\n- Ensure correct formatting for the timestamps and time zone.\n    \n- Data is only available for 24 hours from the specified start timestamp."
					},
					"response": []
				},
				{
					"name": "threats/v1/stats/impersonations",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.services.mimecast.com/threats/v1/stats/impersonations?timestampRangeStartsAt=2023-04-17T00:00:00.000+05:30[Asia/Kolkata]&timestampRangeEndsAt=2023-08-18T00:00:00.000+05:30[Asia/Kolkata]",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"threats",
								"v1",
								"stats",
								"impersonations"
							],
							"query": [
								{
									"key": "timestampRangeStartsAt",
									"value": "2023-04-17T00:00:00.000+05:30[Asia/Kolkata]"
								},
								{
									"key": "timestampRangeEndsAt",
									"value": "2023-08-18T00:00:00.000+05:30[Asia/Kolkata]"
								}
							]
						},
						"description": "## threats/v1/stats/impersonations\n\nRetrieves statistics for impersonation detection events.\n\n**Endpoint**:  \n`GET https://api.services.mimecast.com/threats/v1/stats/impersonations`\n\n**Query Parameters**:\n\n- `timestampRangeStartsAt`: (Required) Start timestamp in extended ISO-8601 format with mandatory time zone. Data available for 24 hours.\n    \n- `timestampRangeEndsAt`: (Optional) End timestamp in extended ISO-8601 format with mandatory time zone. Defaults to current timestamp if not provided. Data available for 24 hours.\n    \n\n**Example Request**:  \n  \nGET [https://api.services.mimecast.com/threats/v1/stats/impersonations?timestampRangeStartsAt=2023-04-17T00:00:00.000+05:30[Asia/Kolkata]×tampRangeEndsAt=2023-08-18T00:00:00.000+05:30[Asia/Kolkata]<br><br>](https://null)**Note**:\n\n- Ensure correct formatting for the timestamps and time zone.\n    \n- Data is only available for 24 hours from the specified start timestamp."
					},
					"response": []
				},
				{
					"name": "threats/v1/stats/url-clicks",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.services.mimecast.com/threats/v1/stats/url-clicks?timestampRangeStartsAt=2023-04-17T00:00:00.000+05:30[Asia/Kolkata]&timestampRangeEndsAt=2023-08-18T00:00:00.000+05:30[Asia/Kolkata]",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"threats",
								"v1",
								"stats",
								"url-clicks"
							],
							"query": [
								{
									"key": "timestampRangeStartsAt",
									"value": "2023-04-17T00:00:00.000+05:30[Asia/Kolkata]"
								},
								{
									"key": "timestampRangeEndsAt",
									"value": "2023-08-18T00:00:00.000+05:30[Asia/Kolkata]"
								}
							]
						},
						"description": "## threats/v1/stats/url-clicks\n\nRetrieves statistics for URL click events.\n\n**Endpoint**:  \n`GET https://api.services.mimecast.com/threats/v1/stats/url-clicks`\n\n**Query Parameters**:\n\n- `timestampRangeStartsAt`: (Required) Start timestamp in extended ISO-8601 format with mandatory time zone. Data available for 24 hours.\n    \n- `timestampRangeEndsAt`: (Optional) End timestamp in extended ISO-8601 format with mandatory time zone. Defaults to current timestamp if not provided. Data available for 24 hours.\n    \n\n**Example Request**:  \nGET [https://api.services.mimecast.com/threats/v1/stats/url-clicks?timestampRangeStartsAt=2023-04-17T00:00:00.000+05:30[Asia/Kolkata]×tampRangeEndsAt=2023-08-18T00:00:00.000+05:30[Asia/Kolkata]<br><br>](https://null)**Note**:\n\n- Ensure correct formatting for the timestamps and time zone.\n    \n- Data is only available for 24 hours from the specified start timestamp."
					},
					"response": []
				}
			]
		},
		{
			"name": "User and Group Management",
			"item": [
				{
					"name": "directory/add-group-member",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"emailAddress\": \"user@example.com\",\n      \"id\": \"group-id-example\",\n      \"notes\": \"Adding user to profile group\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/directory/add-group-member",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"directory",
								"add-group-member"
							]
						},
						"description": "## directory/add-group-member\n\nAdds user email addresses or domains to a profile group.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/directory/add-group-member`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Directories | Groups | Edit' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `emailAddress`: (Optional) The email address of a user to add to a group. Use either emailAddress or domain.\n    \n- `domain`: (Optional) A domain to add to a group. Use either emailAddress or domain.\n    \n- `id`: (Required) The Mimecast ID of the group to add to.\n    \n- `notes`: (Optional) Notes to be linked to the group (maximum length 100 characters).\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"emailAddress\": \"user@example.com\",\n      \"id\": \"group-id-example\",\n      \"notes\": \"Adding user to profile group\"\n    }\n    // Additional members as needed\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "directory/create-group",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"description\": \"New Group Name\",\n      \"parentId\": \"parent-group-id\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/directory/create-group",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"directory",
								"create-group"
							]
						},
						"description": "## directory/create-group\n\nCreates new Profile Groups at the root level or as a child-group.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/directory/create-group`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Directories | Groups | Edit' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `description`: (Required) The name of the new group.\n    \n- `parentId`: (Optional) The Mimecast ID of the new group's parent. If excluded, the new group will be created at the root level.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"description\": \"New Group Name\",\n      \"parentId\": \"parent-group-id\" // Optional. If not included, group is created at root level.\n    }\n    // Add additional groups here, up to 10 in total per request.\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "directory/delete-group",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"group-id-to-delete\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/directory/delete-group",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"directory",
								"delete-group"
							]
						},
						"description": "## directory/delete-group\n\nDeletes an existing profile group.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/directory/delete-group`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Directories | Groups | Edit' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `id`: (Required) The Mimecast secure ID of the group to delete.\n    \n\n**Note**:\n\n- You can delete from 1 to 10 groups per request.\n    \n- Ensure that the group is empty of members or child-groups prior to deletion.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"group-id-to-delete\"\n    }\n    // Add more groups as needed, up to 10 in total per request\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "directory/execute-sync",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/directory/execute-sync",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"directory",
								"execute-sync"
							]
						},
						"description": "## directory/execute-sync\n\nInitiates directory synchronization.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/directory/execute-sync`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Services | Directory Sync | Edit' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Request Body**: Not required for this endpoint.  \n  \n**Note**:\n\n- This endpoint triggers the synchronization process.\n    \n- Ensure the proper permissions are set before making the request.\n    \n\n**Example Request**:\n\n``` json\nPOST https://api.services.mimecast.com/api/directory/execute-sync\n\n ```"
					},
					"response": []
				},
				{
					"name": "directory/find-groups",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"query\": \"\",\n      \"source\": \"cloud\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/directory/find-groups",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"directory",
								"find-groups"
							]
						},
						"description": "## directory/find-groups\n\nFinds groups that exist on a tenant.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/directory/find-groups`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Directories | Groups | Edit' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `query`: (Optional) A string to query for groups.\n    \n- `source`: (Optional) A group source to filter on, either \"cloud\" or \"ldap\".\n    \n\n**Note**:\n\n- The `query` can be any part of the group name or description.\n    \n- The `source` is optional and can be either `ldap` for LDAP synced groups or `cloud` for Mimecast cloud groups.\n    \n- You can only include one query object per request.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"query\": \"example group\",\n      \"source\": \"cloud\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "directory/get-connection",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/directory/get-connection",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"directory",
								"get-connection"
							]
						},
						"description": "## directory/get-connection\n\nRetrieves directory connectors configured on the tenant.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/directory/get-connection`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Services | Directory Sync | Read' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Request Body**: Not required for this endpoint.\n\n**Note**:\n\n- This endpoint is used to retrieve information about directory connectors, including their configuration and status.\n    \n- No specific parameters are needed in the body of the request.\n    \n\n**Example Request**:\n\n``` json\nPOST https://api.services.mimecast.com/api/directory/get-connection\n\n ```"
					},
					"response": []
				},
				{
					"name": "directory/get-group-members",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"group-id-to-retrieve\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/directory/get-group-members",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"directory",
								"get-group-members"
							]
						},
						"description": "## directory/get-group-members\n\nRetrieves group members from groups that exist on a tenant.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/directory/get-group-members`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Services | Directory Sync | Read' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `id`: (Required) The Mimecast ID of the group to return. This ID can be obtained from the `/api/directory/get-group` or `/api/directory/find-groups` endpoints.\n    \n\n**Note**:\n\n- Ensure that you use the correct Mimecast ID of the group for which you want to retrieve members.\n    \n- You can retrieve members for one group per request.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"group-id-to-retrieve\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "directory/remove-group-member",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"emailAddress\": \"user@example.com\",\n      \"id\": \"group-id-to-remove-from\"\n    }\n    // Additional members as needed, up to 10 in total per request\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/directory/remove-group-member",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"directory",
								"remove-group-member"
							]
						},
						"description": "## directory/remove-group-member\n\nRemoves group members from Mimecast Profile groups.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/directory/remove-group-member`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Services | Directory Sync | Edit' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `emailAddress`: (Optional) The email address of a user to remove from a group. Use either emailAddress or domain.\n    \n- `domain`: (Optional) A domain to remove from a group. Use either emailAddress or domain.\n    \n- `id`: (Required) The Mimecast ID of the group to remove from.\n    \n\n**Note**:\n\n- Use either `emailAddress` or `domain` for each item to specify the member to remove.\n    \n- Up to 10 members can be removed in a single request.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"emailAddress\": \"user@example.com\",\n      \"id\": \"group-id-to-remove-from\"\n    }\n    // Additional members as needed, up to 10 in total per request\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "directory/update-group",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"description\": \"Updated Group Name\",\n      \"id\": \"group-id-to-update\",\n      \"parentId\": \"new-parent-group-id\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/directory/update-group",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"directory",
								"update-group"
							]
						},
						"description": "## directory/update-group\n\nUpdates the description of Mimecast Profile groups.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/directory/update-group`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Services | Directory Sync | Edit' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `description`: (Optional) If included, updates the group name.\n    \n- `id`: (Required) The Mimecast ID of the group to update.\n    \n- `parentId`: (Optional) If included, updates the group's parent group.\n    \n\n**Note**:\n\n- The `description` and `parentId` fields are optional and used to update the respective group details.\n    \n- You can update up to 10 groups in a single request.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"description\": \"Updated Group Name\",\n      \"id\": \"group-id-to-update\",\n      \"parentId\": \"new-parent-group-id\"\n    }\n    // Additional group updates as needed, up to 10 in total per request\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "user/add-delegate-user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"delegateAddress\": \"delegate@example.com\",\n      \"primaryAddress\": \"primary@example.com\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/user/add-delegate-user",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"user",
								"add-delegate-user"
							]
						},
						"description": "## user/add-delegate-user\n\nCreates a new delegate permission for a user based on their primary email address.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/user/add-delegate-user`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Directories | Internal | Create Alternate Address' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `delegateAddress`: (Required) The primary email address of the user that will be accessible by the `primaryAddress` user.\n    \n- `primaryAddress`: (Required) The primary email address of the user that will be granted delegate rights to another user.\n    \n\n**Note**:\n\n- This endpoint is used for creating delegate permissions between users.\n    \n- Ensure the email addresses provided are valid and correspond to existing users.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"delegateAddress\": \"delegate@example.com\",\n      \"primaryAddress\": \"primary@example.com\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "user/create-user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"accountCode\": \"account-code\",\n      \"emailAddress\": \"new-user@example.com\",\n      \"forcePasswordChange\": true,\n      \"name\": \"New User\",\n      \"password\": \"user-password\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/user/create-user",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"user",
								"create-user"
							]
						}
					},
					"response": []
				},
				{
					"name": "user/find-delegate-users",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"primaryAddress\": \"primary-user@example.com\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/user/find-delegate-users",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"user",
								"find-delegate-users"
							]
						},
						"description": "## user/find-delegate-users\n\nReturns delegate permissions for a user based on their primary email address.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/user/find-delegate-users`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Directories | Internal | Create Alternate Address' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `primaryAddress`: (Required) The primary email address of the user that has delegate rights to another user.\n    \n\n**Note**:\n\n- This endpoint is used to retrieve delegate permissions associated with a specific primary email address.\n    \n- Ensure the primary email address provided is valid and corresponds to an existing user.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"primaryAddress\": \"primary-user@example.com\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "user/get-aliases",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"emailAddress\": \"primary-email@example.com\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/user/get-aliases",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"user",
								"get-aliases"
							]
						},
						"description": "## user/get-aliases\n\nRetrieves aliases associated with a primary email address.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/user/get-aliases`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Directories | Groups | Read' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `emailAddress`: (Required) The primary email address to retrieve aliases for.\n    \n\n**Note**:\n\n- This endpoint is used to retrieve all aliases associated with the specified primary email address.\n    \n- Ensure that the email address provided is valid and corresponds to an existing user.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"emailAddress\": \"primary-email@example.com\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "user/get-attributes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"emailAddress\": \"user@example.com\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/user/get-attributes",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"user",
								"get-attributes"
							]
						},
						"description": "## user/get-attributes\n\nRetrieves attributes registered on the tenant for a given user.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/user/get-attributes`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Directories | Internal | Read' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `emailAddress`: (Required) The email address of the user to return attributes for.\n    \n\n**Note**:\n\n- This endpoint is used to retrieve user-specific attributes registered within the Mimecast system.\n    \n- You can query attributes for up to 25 users in a single request.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"emailAddress\": \"user@example.com\"\n    }\n    // Additional users as needed, up to 25 in total per request\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "user/get-import-status",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"import-request-id\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/user/get-import-status",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"user",
								"get-import-status"
							]
						},
						"description": "## user/get-import-status\n\nRetrieves the current status of a user import request.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/user/get-import-status`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Directories | Import | Read' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `id`: (Required) The Mimecast secure ID of the user import request. This ID is obtained from `/api/user/import-users`.\n    \n\n**Note**:\n\n- This endpoint is used to check the status of user import requests.\n    \n- You can check the status of up to 10 user import requests in a single API call.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"import-request-id\"\n    }\n    // Additional import request IDs as needed, up to 10 in total per request\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "user/get-internal-users",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"domain\": \"example.com\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/user/get-internal-users",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"user",
								"get-internal-users"
							]
						},
						"description": "## user/get-internal-users\n\nRetrieves all internal users for a given domain.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/user/get-internal-users`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Directories | Internal | Read' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `domain`: (Required) The parent domain to return users for.\n    \n\n**Note**:\n\n- This endpoint is used to retrieve a list of all internal users associated with the specified domain.\n    \n- Ensure the domain is correctly specified to retrieve relevant user information.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"domain\": \"example.com\"\n    }\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "user/get-most-used-contacts",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/user/get-most-used-contacts",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"user",
								"get-most-used-contacts"
							]
						},
						"description": "## user/get-most-used-contacts\n\nReturns the most used contacts synced from Azure Active Directory.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/user/get-most-used-contacts`\n\n**Pre-requisites**:  \nNo Mimecast Administrator Role required for this endpoint.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Request Body**: Not required for this endpoint.\n\n**Note**:\n\n- This endpoint is specifically designed to retrieve the most frequently used contacts as synchronized from Azure Active Directory.\n    \n- No additional parameters are required in the request body.\n    \n\n**Example Request**:\n\n``` json\nPOST https://api.services.mimecast.com/api/user/get-most-used-contacts\n\n ```"
					},
					"response": []
				},
				{
					"name": "user/import-users",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mc-arg",
								"value": "{\"data\": [{ \"notifyEmailAddress\":\"String\", \"allowAddressMigration\":true, \"groupId\":\"String\", \"clearGroup\":false, \"fileType\":\"csv\" }]}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"email,name,mobile\\r\\n[email],[Name],[phoneNumber]\\r\\n\""
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/user/import-users",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"user",
								"import-users"
							]
						},
						"description": "## user/import-users\n\nImports users to an Internal Directory or a Profile Group via file upload (XSLX, XLS, CSV) or a CSV-structured request body.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/user/import-users`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Directories | Import | Edit' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n- x-mc-arg: A header containing a JSON object (see example).\n    \n\n**Header Parameters**:\n\n- `x-mc-arg`: JSON object containing import details.\n    \n\n**Request Body (for CSV file format)**:\n\n- CSV content should be included in the request body as shown in the example.\n    \n\n**Note**:\n\n- Ensure your body ends with a new line character for CSV file format.\n    \n- Refer to the Mimecast Community KB for a list of available fields.\n    \n- Supports AAA accounts for importing users to specific mail-processing child accounts.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"x-mc-arg\": \"{\\\"data\\\": [{ \\\"notifyEmailAddress\\\":\\\"String\\\", \\\"allowAddressMigration\\\":true, \\\"groupId\\\":\\\"String\\\", \\\"clearGroup\\\":false, \\\"fileType\\\":\\\"csv\\\" }]}\",\n  \"body\": \"\\\"email,name,mobile\\\\r\\\\n[email],[Name],[phoneNumber]\\\\r\\\\n\\\"\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "user/remove-alias",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"alias\": \"alias-email@example.com\",\n      \"aliasFor\": \"primary-email@example.com\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/user/remove-alias",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"user",
								"remove-alias"
							]
						},
						"description": "## user/remove-alias\n\nRemoves an alias associated with a primary email address.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/user/remove-alias`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Directories | Groups | Edit' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `alias`: (Required) The email address to remove as an alias address.\n    \n- `aliasFor`: (Required) The primary email address to remove the alias from.\n    \n\n**Note**:\n\n- This endpoint is used to disassociate alias email addresses from their respective primary email addresses.\n    \n- Ensure the alias and primary email addresses provided are valid and correctly associated.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"alias\": \"alias-email@example.com\",\n      \"aliasFor\": \"primary-email@example.com\"\n    }\n    // Additional aliases as needed, up to 5 in total per request\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "user/remove-delegate-user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"delegate-entry-id\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/user/remove-delegate-user",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"user",
								"remove-delegate-user"
							]
						},
						"description": "## user/remove-delegate-user\n\nRemoves delegate permissions for a user based on their primary email address.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/user/remove-delegate-user`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Directories | Internal | Create Alternate Address' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `id`: (Required) The Mimecast secure ID of the delegate entry, which can be obtained from `/api/user/find-delegate-rights`.\n    \n\n**Note**:\n\n- This endpoint is used to remove delegate permissions associated with a specific user.\n    \n- Ensure the correct delegate entry ID is used for removal.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"id\": \"delegate-entry-id\"\n    }\n    // Additional delegate entries as needed, up to 25 in total per request\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "user/update-alias",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"alias\": \"new-alias-email@example.com\",\n      \"aliasFor\": \"primary-email@example.com\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/user/update-alias",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"user",
								"update-alias"
							]
						},
						"description": "## user/update-alias\n\nModifies secondary email addresses for users.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/user/update-alias`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Directories | Groups | Edit' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `alias`: (Required) The email address to set as an alias address.\n    \n- `aliasFor`: (Required) The primary email address to set the alias for.\n    \n\n**Note**:\n\n- This endpoint is used to set or modify alias email addresses for primary email accounts.\n    \n- Ensure the email addresses provided are valid and correspond to existing users.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"alias\": \"new-alias-email@example.com\",\n      \"aliasFor\": \"primary-email@example.com\"\n    }\n    // Additional aliases as needed, up to 5 in total per request\n  ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "user/update-attributes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"emailAddress\": \"user@example.com\",\n      \"attributes\": [\n        {\n          \"name\": \"attributeName\",\n          \"value\": \"attributeValue\"\n        }\n      ]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/user/update-attributes",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"user",
								"update-attributes"
							]
						}
					},
					"response": []
				},
				{
					"name": "user/update-user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"emailAddress\": \"user@example.com\",\n      \"accountDisabled\": false,\n      \"accountLocked\": false,\n      \"allowPop\": true,\n      \"allowSmtp\": true,\n      \"archiveStartDate\": \"2023-01-01T00:00:00Z\",\n      \"forcePasswordChange\": false,\n      \"name\": \"New User Name\",\n      \"password\": \"newPassword\",\n      \"passwordNeverExpires\": false\n    }\n  ]\n}"
						},
						"url": {
							"raw": "https://api.services.mimecast.com/api/user/update-user",
							"protocol": "https",
							"host": [
								"api",
								"services",
								"mimecast",
								"com"
							],
							"path": [
								"api",
								"user",
								"update-user"
							]
						},
						"description": "## user/update-user\n\nUpdates users within an Internal Directory.\n\n**Endpoint**:  \n`POST https://api.services.mimecast.com/api/user/update-user`\n\n**Pre-requisites**:  \nThe role assigned to the app must have 'Directories | Internal | Edit' permissions granted.\n\n**Headers**:\n\n- Content-Type: application/json\n    \n\n**Body Parameters**:\n\n- `emailAddress`: (Required) The email address of the user to update.\n    \n- `accountDisabled`: (Optional) If the user is disabled.\n    \n- `accountLocked`: (Optional) If the user account is locked out.\n    \n- `allowPop`: (Optional) If the user can access Mimecast using POP3.\n    \n- `allowSmtp`: (Optional) If SMTP email submission is allowed for the user.\n    \n- `archiveStartDate`: (Optional) ISO 8601 format date for the user's archive start.\n    \n- `forcePasswordChange`: (Optional) If the user must change their password on next login.\n    \n- `name`: (Optional) The display name for the user.\n    \n- `password`: (Optional) The new password for the user.\n    \n- `passwordNeverExpires`: (Optional) If the user's Mimecast cloud password is exempt from expiry.\n    \n\n**Note**:\n\n- This endpoint allows for the update of various user settings and attributes within Mimecast.\n    \n- Ensure to provide the correct details for the user update, and include only the fields that need to be modified.\n    \n\n**Request Body Example**:\n\n``` json\n{\n  \"data\": [\n    {\n      \"emailAddress\": \"user@example.com\",\n      \"accountDisabled\": false,\n      \"accountLocked\": false,\n      \"allowPop\": true,\n      \"allowSmtp\": true,\n      \"archiveStartDate\": \"2023-01-01T00:00:00Z\",\n      \"forcePasswordChange\": false,\n      \"name\": \"New User Name\",\n      \"password\": \"newPassword\",\n      \"passwordNeverExpires\": false\n    }\n    // Additional users as needed, up to 5 in total per request\n  ]\n}\n\n ```"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Oauth Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"client_id:\", pm.environment.get(\"client_id\"));",
							"console.log(\"client_secret:\", pm.environment.get(\"client_secret\"));",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "{{client_id}}",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{client_secret}}",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://api.services.mimecast.com/oauth/token",
					"protocol": "https",
					"host": [
						"api",
						"services",
						"mimecast",
						"com"
					],
					"path": [
						"oauth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Account",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.services.mimecast.com/api/account/get-account",
					"protocol": "https",
					"host": [
						"api",
						"services",
						"mimecast",
						"com"
					],
					"path": [
						"api",
						"account",
						"get-account"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearerToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var clientId = pm.environment.get(\"client_id\");",
					"var clientSecret = pm.environment.get(\"client_secret\");",
					"",
					"var tokenRequest = {",
					"    url: 'https://api.services.mimecast.com/oauth/token',",
					"    method: 'POST',",
					"    header: 'Content-Type: application/x-www-form-urlencoded',",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            { key: \"client_id\", value: clientId },",
					"            { key: \"client_secret\", value: clientSecret },",
					"            { key: \"grant_type\", value: \"client_credentials\" }",
					"        ]",
					"    }",
					"};",
					"",
					"pm.sendRequest(tokenRequest, function (err, res) {",
					"    if (err) {",
					"        console.log(\"Error obtaining token:\", err);",
					"    } else {",
					"        var responseData = res.json();",
					"        if (responseData.access_token) {",
					"            pm.environment.set(\"bearerToken\", responseData.access_token);",
					"            console.log(\"New token set:\", responseData.access_token);",
					"        } else {",
					"            console.log(\"Response does not contain an access token:\", responseData);",
					"        }",
					"    }",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}